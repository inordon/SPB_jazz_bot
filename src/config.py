import os
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass, field
from dotenv import load_dotenv

load_dotenv()

@dataclass
class Config:
    # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DB_HOST: str = os.getenv("DB_HOST", "localhost")
    DB_PORT: int = int(os.getenv("DB_PORT", "5432"))
    DB_NAME: str = os.getenv("DB_NAME", "festival_bot")
    DB_USER: str = os.getenv("DB_USER", "postgres")
    DB_PASSWORD: str = os.getenv("DB_PASSWORD", "")

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    ADMIN_IDS: List[int] = field(default_factory=lambda: [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()])
    SUPPORT_STAFF_IDS: List[int] = field(default_factory=lambda: [int(x) for x in os.getenv("SUPPORT_STAFF_IDS", "").split(",") if x.strip()])

    # –ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã
    SUPPORT_GROUP_ID: Optional[str] = os.getenv("SUPPORT_GROUP_ID")
    SUPPORT_GROUP_TOPICS: bool = os.getenv("SUPPORT_GROUP_TOPICS", "true").lower() == "true"
    FEEDBACK_CHANNEL_ID: Optional[str] = os.getenv("FEEDBACK_CHANNEL_ID")

    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SMTP_SERVER: str = os.getenv("SMTP_SERVER", "smtp.gmail.com")
    SMTP_PORT: int = int(os.getenv("SMTP_PORT", "587"))
    EMAIL_USER: Optional[str] = os.getenv("EMAIL_USER")
    EMAIL_PASSWORD: Optional[str] = os.getenv("EMAIL_PASSWORD")
    SUPPORT_EMAIL: Optional[str] = os.getenv("SUPPORT_EMAIL")

    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    SOCIAL_LINKS: Dict[str, str] = field(default_factory=lambda: {
        "Instagram": "https://instagram.com/festival",
        "VK": "https://vk.com/festival",
        "Telegram": "https://t.me/festival_channel",
        "YouTube": "https://youtube.com/festival",
        "Spotify": "https://open.spotify.com/festival"
    })

    # –ë–∏–ª–µ—Ç—ã
    TICKET_PURCHASE_URL: str = os.getenv("TICKET_PURCHASE_URL", "https://tickets.festival.com")

    # –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç—ã
    YANDEX_MAPS_BASE_URL: str = "https://yandex.ru/maps/?rtext="

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞)
    FESTIVAL_COORDINATES: str = os.getenv("FESTIVAL_COORDINATES", "55.7558,37.6176")

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    SINGLE_LOCATIONS_COORDINATES: Dict[str, str] = field(default_factory=lambda: {
        "foodcourt": os.getenv("FOODCOURT_COORDINATES", "55.7562,37.6174"),
        "workshops": os.getenv("WORKSHOPS_COORDINATES", "55.7556,37.6182"),
        "main_stage": os.getenv("MAIN_STAGE_COORDINATES", "55.7558,37.6176"),
        "small_stage": os.getenv("SMALL_STAGE_COORDINATES", "55.7560,37.6180"),
        "lecture_hall": os.getenv("LECTURE_HALL_COORDINATES", "55.7559,37.6179"),
    })

    # –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫–∞—Ä—Ç
    MAPS_IMAGES_PATH: str = os.getenv("MAPS_IMAGES_PATH", "images/")

    # –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∫–∞—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    MAPS_IMAGES: Dict[str, str] = field(default_factory=lambda: {
        "festival_map": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "festival_map.jpg"),
        "main_stage": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "main_stage_map.jpg"),
        "small_stage": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "small_stage_map.jpg"),
        "lecture_hall": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "lecture_hall_map.jpg"),
        "foodcourt": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "foodcourt_map.jpg"),
        "workshops": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "workshops_map.jpg"),
        "souvenirs": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "souvenirs_map.jpg"),
        "toilets": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "toilets_map.jpg"),
        "medical": os.path.join(os.getenv("MAPS_IMAGES_PATH", "images/"), "medical_map.jpg")
    })

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    LOCATIONS_INFO: Dict[str, Dict[str, any]] = field(default_factory=lambda: {
        "main_stage": {
            "title": "üé§ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞",
            "description": "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
            "details": [
                "üéµ –ì–ª–∞–≤–Ω—ã–µ —Ö–µ–¥–ª–∞–π–Ω–µ—Ä—ã",
                "üîä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–≤—É–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
                "üí° –°–≤–µ—Ç–æ–≤–æ–µ —à–æ—É",
                "üì∫ –ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã",
                "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 5000 —á–µ–ª–æ–≤–µ–∫"
            ]
        },
        "small_stage": {
            "title": "üé≠ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞",
            "description": "–ö–∞–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–æ—Å—Ç–∞–≤–æ–≤",
            "details": [
                "üé∂ –ö–∞–º–µ—Ä–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è",
                "üé∏ –ò–Ω–¥–∏ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞",
                "üé§ –ú–æ–ª–æ–¥—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
                "üé∫ –î–∂–∞–∑ –∏ –±–ª—é–∑",
                "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 1000 —á–µ–ª–æ–≤–µ–∫"
            ]
        },
        "lecture_hall": {
            "title": "üéì –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ª",
            "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –ª–µ–∫—Ü–∏–π –∏ —Å–µ–º–∏–Ω–∞—Ä–æ–≤",
            "details": [
                "üìö –õ–µ–∫—Ü–∏–∏ –æ –º—É–∑—ã–∫–µ",
                "üéº –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã —Ç–µ–æ—Ä–∏–∏",
                "üíº –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å",
                "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
                "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 200 —á–µ–ª–æ–≤–µ–∫"
            ]
        },
        "foodcourt": {
            "title": "üçï –§—É–¥–∫–æ—Ä—Ç",
            "description": "–ó–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏",
            "details": [
                "üçï –ü–∏—Ü—Ü–∞ –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è",
                "üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Ñ–∞—Å—Ç-—Ñ—É–¥",
                "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                "‚òï –ö–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏",
                "üç∞ –î–µ—Å–µ—Ä—Ç—ã –∏ –≤—ã–ø–µ—á–∫–∞"
            ]
        },
        "workshops": {
            "title": "üé® –ó–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
            "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏",
            "details": [
                "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "üé§ –í–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
                "üíª –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
                "‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω",
                "üéß –ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–∞"
            ]
        },
        "souvenirs": {
            "title": "üõç –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã",
            "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
            "details": [
                "üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∏",
                "üß¢ –ö–µ–ø–∫–∏ –∏ –≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
                "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
                "üìÄ –î–∏—Å–∫–∏ –∏ –≤–∏–Ω–∏–ª",
                "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã"
            ]
        },
        "toilets": {
            "title": "üöª –¢—É–∞–ª–µ—Ç—ã",
            "description": "–°–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
            "details": [
                "üöπ –ú—É–∂—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                "üö∫ –ñ–µ–Ω—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                "‚ôø –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                "üë∂ –ü–µ–ª–µ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã",
                "üßº –£–º—ã–≤–∞–ª—å–Ω–∏–∫–∏"
            ]
        },
        "medical": {
            "title": "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã",
            "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å",
            "details": [
                "ü©∫ –í—Ä–∞—á–∏ –∏ –º–µ–¥—Å–µ—Å—Ç—Ä—ã",
                "üíä –ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã",
                "üöë –°–≤—è–∑—å —Å —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â—å—é",
                "üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: 112",
                "‚öïÔ∏è –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"
            ]
        }
    })

    # Rate limiting –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    RATE_LIMIT_SETTINGS: Dict[str, int] = field(default_factory=lambda: {
        "message_timeout_seconds": 5,
        "hourly_message_limit": 20,
        "daily_message_limit": 100,
        "spam_block_duration_hours": 1,
        "daily_block_duration_hours": 24
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    SUPPORT_SETTINGS: Dict[str, any] = field(default_factory=lambda: {
        "max_tickets_per_user": 5,
        "auto_close_days": 7,
        "urgent_response_hours": 2,
        "max_message_length": 4000,
        "min_message_length": 10,
        "allowed_file_types": ["photo", "document", "video", "audio"],
        "max_file_size_mb": 20
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    CRITICAL_FEEDBACK_SETTINGS: Dict[str, any] = field(default_factory=lambda: {
        "critical_rating_threshold": 2,
        "urgent_rating_threshold": 1,
        "notify_admins": True,
        "notify_support_group": True,
        "auto_create_ticket": False,
        "require_immediate_action": True,
        "max_critical_per_hour": 5,
        "escalation_delay_hours": 2,
    })

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    CATEGORY_RECOMMENDATIONS: Dict[str, List[str]] = field(default_factory=lambda: {
        "festival": [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–ª–æ–±—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–æ–º—Ñ–æ—Ä—Ç",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–ª—É–∂–±",
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"
        ],
        "food": [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ—É–¥–∫–æ—Ä—Ç–µ",
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É",
            "–ü—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        ],
        "workshops": [
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–µ–¥—É—â–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤"
        ],
        "lectures": [
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–µ–∫—Ç–æ—Ä–∞–º–∏",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ª–µ–∫—Ç–æ—Ä–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
        ],
        "infrastructure": [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–æ–≤ –∏ –º–µ–¥–ø—É–Ω–∫—Ç–æ–≤",
            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
            "–£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —á–∏—Å—Ç–æ—Ç—É"
        ]
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    MONITORING_SETTINGS: Dict[str, any] = field(default_factory=lambda: {
        "health_check_interval_minutes": 5,
        "log_retention_days": 30,
        "stats_retention_days": 365,
        "backup_interval_hours": 24,
        "alert_admins_on_errors": True,
        "max_error_notifications_per_hour": 5
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    SECURITY_SETTINGS: Dict[str, any] = field(default_factory=lambda: {
        "enable_rate_limiting": True,
        "enable_spam_detection": True,
        "block_suspicious_users": True,
        "log_all_actions": True,
        "require_email_verification": False,
        "max_login_attempts": 5,
        "blacklisted_words": ["spam", "casino", "viagra", "bitcoin"]
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    NOTIFICATION_SETTINGS: Dict[str, bool] = field(default_factory=lambda: {
        "notify_admins_new_tickets": True,
        "notify_admins_urgent_tickets": True,
        "notify_admins_system_errors": True,
        "notify_admins_high_load": True,
        "notify_admins_critical_feedback": True,
        "daily_stats_report": True,
        "weekly_summary_report": True
    })

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    TEXT_TEMPLATES: Dict[str, str] = field(default_factory=lambda: {
        "welcome_message": """
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –§–µ—Å—Ç–∏–≤–∞–ª—å!

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
- üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
- üó∫ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ
- üé´ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
- üé® –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
- üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
- üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
        """,

        "support_confirmation": """
‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ!

‚è± –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.
üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç.
üîî –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç!

üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —ç—Ç–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é.
        """,

        "rate_limit_warning": """
‚è≥ {reason}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """,

        "ticket_closed_message": """
‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–æ

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! 
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.

üåü –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ "üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        """,

        "feedback_thanks": """
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {has_comment}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üôè
        """,

        "critical_feedback_admin": """
üö® {severity} –û–¢–ó–´–í

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ò–º—è: {user_name}
- Username: @{username}
- ID: {user_id}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
{comment}

‚è∞ –í—Ä–µ–º—è: {timestamp}

üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:
{recommendations}

üìû –ö–û–ù–¢–ê–ö–¢ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú:
- Telegram: @{username}
- ID –¥–ª—è —Å–≤—è–∑–∏: {user_id}

üí° –≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!
        """,

        "critical_feedback_support_group": """
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ó–´–í –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø

üìä {category_name}: {stars} ({rating}/5)
üë§ {user_name} (@{username})

üí¨ "{comment}"

üéØ –ö—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã?
        """,

        "critical_feedback_user_response": """
üòî –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_status}

–ú—ã –æ—á–µ–Ω—å —Å–æ–∂–∞–ª–µ–µ–º –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π.

üîß –ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–æ–±–ª–µ–º–µ.
üìû –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /start ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

üíô –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!
        """,

        "neutral_feedback_user_response": """
ü§î –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_status}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!

üí° –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """,

        "positive_feedback_user_response": """
üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_status}

–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!

üåü –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö!
        """
    })

    # Emoji –∏ —Å–∏–º–≤–æ–ª—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    EMOJIS: Dict[str, str] = field(default_factory=lambda: {
        "success": "‚úÖ",
        "error": "‚ùå",
        "warning": "‚ö†Ô∏è",
        "info": "‚ÑπÔ∏è",
        "loading": "‚è≥",
        "admin": "üë®‚Äçüíº",
        "support": "üßë‚Äçüíº",
        "user": "üë§",
        "urgent": "üö®",
        "critical": "üî¥",
        "high": "üü°",
        "closed": "üîí",
        "open": "üîì",
        "new": "üÜï",
        "star": "‚≠ê",
        "fire": "üî•",
        "rocket": "üöÄ",
        "heart": "‚ù§Ô∏è"
    })

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–º–µ—Ç–æ–¥)
    def get_multiple_locations(self) -> Dict[str, List[Dict[str, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        locations = {}

        # –°—É–≤–µ–Ω–∏—Ä—ã
        souvenirs_coords = os.getenv("SOUVENIRS_COORDINATES", "55.7560,37.6170").split(";")
        souvenirs_names = os.getenv("SOUVENIRS_NAMES", "–°—É–≤–µ–Ω–∏—Ä–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω").split(";")
        locations["souvenirs"] = [
            {"name": name.strip(), "coordinates": coord.strip()}
            for name, coord in zip(souvenirs_names, souvenirs_coords)
        ]

        # –¢—É–∞–ª–µ—Ç—ã
        toilets_coords = os.getenv("TOILETS_COORDINATES", "55.7559,37.6178").split(";")
        toilets_names = os.getenv("TOILETS_NAMES", "–¢—É–∞–ª–µ—Ç—ã").split(";")
        locations["toilets"] = [
            {"name": name.strip(), "coordinates": coord.strip()}
            for name, coord in zip(toilets_names, toilets_coords)
        ]

        # –ú–µ–¥–ø—É–Ω–∫—Ç—ã
        medical_coords = os.getenv("MEDICAL_COORDINATES", "55.7558,37.6176").split(";")
        medical_names = os.getenv("MEDICAL_NAMES", "–ú–µ–¥–ø—É–Ω–∫—Ç").split(";")
        locations["medical"] = [
            {"name": name.strip(), "coordinates": coord.strip()}
            for name, coord in zip(medical_names, medical_coords)
        ]

        return locations

    @property
    def MULTIPLE_LOCATIONS(self) -> Dict[str, List[Dict[str, str]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        return self.get_multiple_locations()

    @classmethod
    def get_yandex_route_url(cls, destination_coords: str, start_coords: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö"""
        if not start_coords:
            start_coords = os.getenv("FESTIVAL_COORDINATES", "55.7558,37.6176")
        return f"https://yandex.ru/maps/?rtext={start_coords}~{destination_coords}&rtt=auto"

    def get_location_coordinates(self, location_type: str, location_index: int = 0) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –∏–Ω–¥–µ–∫—Å—É"""
        # –î–ª—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        if location_type in self.SINGLE_LOCATIONS_COORDINATES:
            return self.SINGLE_LOCATIONS_COORDINATES[location_type]

        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        multiple_locations = self.MULTIPLE_LOCATIONS
        if location_type in multiple_locations:
            locations = multiple_locations[location_type]
            if 0 <= location_index < len(locations):
                return locations[location_index]["coordinates"]

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
        return self.FESTIVAL_COORDINATES

    def get_location_name(self, location_type: str, location_index: int = 0) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –∏–Ω–¥–µ–∫—Å—É"""
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        multiple_locations = self.MULTIPLE_LOCATIONS
        if location_type in multiple_locations:
            locations = multiple_locations[location_type]
            if 0 <= location_index < len(locations):
                return locations[location_index]["name"]

        # –î–ª—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        location_titles = {
            "main_stage": "–ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞",
            "small_stage": "–ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞",
            "lecture_hall": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ª",
            "foodcourt": "–§—É–¥–∫–æ—Ä—Ç",
            "workshops": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"
        }

        return location_titles.get(location_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")

    def get_all_locations_of_type(self, location_type: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        multiple_locations = self.MULTIPLE_LOCATIONS
        if location_type in multiple_locations:
            return multiple_locations[location_type]

        # –î–ª—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        if location_type in self.SINGLE_LOCATIONS_COORDINATES:
            return [{
                "name": self.get_location_name(location_type),
                "coordinates": self.SINGLE_LOCATIONS_COORDINATES[location_type]
            }]

        return []

    def get_critical_feedback_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        return self.CRITICAL_FEEDBACK_SETTINGS

    def get_category_recommendations(self, category: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        base_recommendations = [
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã"
        ]

        category_specific = self.CATEGORY_RECOMMENDATIONS.get(category, [])
        return base_recommendations + category_specific

    def get_database_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return f"postgresql://{self.DB_USER}:{self.DB_PASSWORD}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}"

    def validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.BOT_TOKEN:
            errors.append("BOT_TOKEN is required")

        if not self.DB_PASSWORD:
            errors.append("DB_PASSWORD is required")

        if not self.ADMIN_IDS:
            errors.append("At least one ADMIN_ID is required")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
        if self.EMAIL_USER and not self.EMAIL_PASSWORD:
            errors.append("EMAIL_PASSWORD is required when EMAIL_USER is set")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
        if self.SUPPORT_GROUP_ID and not self.SUPPORT_GROUP_ID.startswith('-'):
            errors.append("SUPPORT_GROUP_ID should start with '-'")

        if self.FEEDBACK_CHANNEL_ID and not self.FEEDBACK_CHANNEL_ID.startswith('-'):
            errors.append("FEEDBACK_CHANNEL_ID should start with '-'")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        def validate_coordinates(coords_str: str, name: str):
            try:
                for coord_pair in coords_str.split(";"):
                    lat, lng = coord_pair.strip().split(",")
                    float(lat.strip())
                    float(lng.strip())
            except (ValueError, IndexError):
                errors.append(f"Invalid coordinates format for {name}: {coords_str}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        validate_coordinates(self.FESTIVAL_COORDINATES, "FESTIVAL_COORDINATES")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        try:
            for location_type in ["souvenirs", "toilets", "medical"]:
                locations = self.get_all_locations_of_type(location_type)
                for i, location in enumerate(locations):
                    validate_coordinates(location["coordinates"], f"{location_type}[{i}]")
        except Exception as e:
            errors.append(f"Error validating multiple locations: {str(e)}")

        if errors:
            print("Configuration errors:")
            for error in errors:
                print(f"  - {error}")
            return False

        return True

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.ADMIN_IDS

    def is_support_staff(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        return user_id in self.SUPPORT_STAFF_IDS

    def has_support_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        return self.is_admin(user_id) or self.is_support_staff(user_id)

    def get_user_role(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_admin(user_id):
            return "admin"
        elif self.is_support_staff(user_id):
            return "support"
        else:
            return "user"

    def get_formatted_template(self, template_name: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        template = self.TEXT_TEMPLATES.get(template_name, "")
        try:
            return template.format(**kwargs)
        except KeyError as e:
            print(f"Missing template variable: {e}")
            return template

    def get_rate_limit_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ rate limiting"""
        return self.RATE_LIMIT_SETTINGS

    def get_support_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        return self.SUPPORT_SETTINGS

    def get_monitoring_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return self.MONITORING_SETTINGS

    def get_security_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return self.SECURITY_SETTINGS

    def get_notification_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.NOTIFICATION_SETTINGS

    @property
    def debug_mode(self) -> bool:
        """–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"""
        return os.getenv("DEBUG", "false").lower() == "true"

    @property
    def log_level(self) -> str:
        """–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return os.getenv("LOG_LEVEL", "INFO").upper()

    @property
    def environment(self) -> str:
        """–û–∫—Ä—É–∂–µ–Ω–∏–µ (development, staging, production)"""
        return os.getenv("ENVIRONMENT", "development").lower()

    def __post_init__(self):
        """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        import pathlib
        pathlib.Path("logs").mkdir(exist_ok=True)
        pathlib.Path("backups").mkdir(exist_ok=True)
        pathlib.Path(self.MAPS_IMAGES_PATH).mkdir(exist_ok=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ == "__main__":
    if config.validate_config():
        print("‚úÖ Configuration is valid")
        print(f"üìä Environment: {config.environment}")
        print(f"üîç Debug mode: {config.debug_mode}")
        print(f"üìù Log level: {config.log_level}")
        print(f"üë• Admins: {len(config.ADMIN_IDS)}")
        print(f"üßë‚Äçüíº Support staff: {len(config.SUPPORT_STAFF_IDS)}")
        print(f"üíæ Database: {config.DB_HOST}:{config.DB_PORT}/{config.DB_NAME}")
        print(f"üìß Email configured: {'Yes' if config.EMAIL_USER else 'No'}")
        print(f"üè™ Support group: {'Yes' if config.SUPPORT_GROUP_ID else 'No'}")
        print(f"üì¢ Feedback channel: {'Yes' if config.FEEDBACK_CHANNEL_ID else 'No'}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        print(f"\nüìç Locations configured:")
        try:
            for location_type in ["souvenirs", "toilets", "medical"]:
                locations = config.get_all_locations_of_type(location_type)
                print(f"  {location_type}: {len(locations)} points")
                for i, loc in enumerate(locations):
                    print(f"    {i+1}. {loc['name']} ({loc['coordinates']})")
        except Exception as e:
            print(f"  Error loading locations: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
        critical_config = config.get_critical_feedback_config()
        print(f"\nüö® Critical feedback settings:")
        print(f"  Critical threshold: <= {critical_config['critical_rating_threshold']} stars")
        print(f"  Urgent threshold: <= {critical_config['urgent_rating_threshold']} stars")
        print(f"  Notify admins: {critical_config['notify_admins']}")
        print(f"  Notify support group: {critical_config['notify_support_group']}")
    else:
        print("‚ùå Configuration validation failed")
        exit(1)