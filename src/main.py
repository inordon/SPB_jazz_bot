import asyncio
import logging
import sys
import signal
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from database import Database
from handlers import BotHandlers
from utils import EmailSender, DataBackup, HealthChecker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    import pathlib
    pathlib.Path("logs").mkdir(exist_ok=True)

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, config.log_level),
        format=log_format,
        handlers=[
            logging.FileHandler('logs/bot.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    error_handler = logging.FileHandler('logs/errors.log', encoding='utf-8')
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(logging.Formatter(log_format))
    logging.getLogger().addHandler(error_handler)

    # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_logger = logging.getLogger('stats')
    stats_handler = logging.FileHandler('logs/stats.log', encoding='utf-8')
    stats_handler.setFormatter(logging.Formatter(log_format))
    stats_logger.addHandler(stats_handler)
    stats_logger.setLevel(logging.INFO)

    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_logger = logging.getLogger('support')
    support_handler = logging.FileHandler('logs/support.log', encoding='utf-8')
    support_handler.setFormatter(logging.Formatter(log_format))
    support_logger.addHandler(support_handler)
    support_logger.setLevel(logging.INFO)

logger = logging.getLogger(__name__)

class FestivalBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""

    def __init__(self):
        self.bot = None
        self.dp = None
        self.database = None
        self.handlers = None
        self.email_sender = None
        self.health_checker = None
        self.data_backup = None
        self.running = False
        self.background_tasks = []

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("Starting bot setup...")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not config.validate_config():
                raise ValueError("Invalid configuration")

            logger.info(f"Environment: {config.environment}")
            logger.info(f"Debug mode: {config.debug_mode}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = Bot(
                token=config.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            bot_info = await self.bot.get_me()
            logger.info(f"Bot initialized: @{bot_info.username} ({bot_info.first_name})")

            # –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
            storage = MemoryStorage()
            self.dp = Dispatcher(storage=storage)

            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info("Initializing database connection...")
            self.database = Database(config.get_database_url())
            await self.database.create_pool()
            await self.database.init_tables()
            logger.info("Database initialized successfully")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            logger.info("Setting up message handlers...")
            self.handlers = BotHandlers(self.database, self.bot)
            self.dp.include_router(self.handlers.router)
            logger.info("Message handlers configured")

            # Email —Å–µ–Ω–¥–µ—Ä
            if config.EMAIL_USER and config.EMAIL_PASSWORD:
                logger.info("Initializing email sender...")
                self.email_sender = EmailSender(
                    config.SMTP_SERVER,
                    config.SMTP_PORT,
                    config.EMAIL_USER,
                    config.EMAIL_PASSWORD
                )
                logger.info("Email sender initialized")
            else:
                logger.warning("Email settings not configured")

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
            logger.info("Initializing health checker...")
            self.health_checker = HealthChecker(self.database, self.bot)
            logger.info("Health checker initialized")

            # –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info("Initializing backup system...")
            self.data_backup = DataBackup(self.database)
            logger.info("Backup system initialized")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self._setup_bot_commands()

            logger.info("Bot setup completed successfully")

        except Exception as e:
            logger.error(f"Failed to setup bot: {e}")
            raise

    async def _setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        from aiogram.types import BotCommand

        commands = [
            BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="menu", description="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            BotCommand(command="schedule", description="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
            BotCommand(command="navigation", description="üó∫ –ù–∞–≤–∏–≥–∞—Ü–∏—è"),
            BotCommand(command="support", description="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            BotCommand(command="feedback", description="üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        ]

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_commands = commands + [
            BotCommand(command="admin", description="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
            BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="health", description="üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"),
        ]

        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.bot.set_my_commands(commands)

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            from aiogram.types import BotCommandScopeChat
            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.set_my_commands(
                        admin_commands,
                        scope=BotCommandScopeChat(chat_id=admin_id)
                    )
                except Exception as e:
                    logger.warning(f"Failed to set admin commands for {admin_id}: {e}")

            logger.info("Bot commands configured successfully")

        except Exception as e:
            logger.error(f"Failed to setup bot commands: {e}")

    async def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("Starting background tasks...")

        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_task = asyncio.create_task(self.health_check_loop())
        self.background_tasks.append(health_task)

        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanup_task = asyncio.create_task(self.cleanup_loop())
        self.background_tasks.append(cleanup_task)

        # –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backup_task = asyncio.create_task(self.backup_loop())
        self.background_tasks.append(backup_task)

        # –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_task = asyncio.create_task(self.stats_loop())
        self.background_tasks.append(stats_task)

        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ä–æ—á–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        urgent_tickets_task = asyncio.create_task(self.urgent_tickets_loop())
        self.background_tasks.append(urgent_tickets_task)

        logger.info(f"Started {len(self.background_tasks)} background tasks")

    async def health_check_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("Health check loop started")

        while self.running:
            try:
                await asyncio.sleep(config.get_monitoring_config()["health_check_interval_minutes"] * 60)

                if self.health_checker:
                    health_status = await self.health_checker.health_check()

                    if not self.health_checker.is_healthy:
                        logger.warning(f"Health check failed: {health_status}")

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                        if config.get_notification_config()["notify_admins_system_errors"]:
                            await self._notify_admins_about_health_issues(health_status)

                    else:
                        logger.debug("Health check passed")

            except asyncio.CancelledError:
                logger.info("Health check loop cancelled")
                break
            except Exception as e:
                logger.error(f"Health check error: {e}")

    async def cleanup_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("Cleanup loop started")

        while self.running:
            try:
                # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                await asyncio.sleep(24 * 60 * 60)

                logger.info("Starting data cleanup...")

                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
                await self._cleanup_old_logs()

                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self._cleanup_old_stats()

                # –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
                await self._auto_close_old_tickets()

                logger.info("Data cleanup completed")

            except asyncio.CancelledError:
                logger.info("Cleanup loop cancelled")
                break
            except Exception as e:
                logger.error(f"Cleanup error: {e}")

    async def backup_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        logger.info("Backup loop started")

        while self.running:
            try:
                # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                await asyncio.sleep(config.get_monitoring_config()["backup_interval_hours"] * 60 * 60)

                if self.data_backup:
                    logger.info("Creating database backup...")
                    backup_data = await self.data_backup.create_backup()

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Ñ–∞–π–ª
                    import json
                    import os

                    backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    backup_path = os.path.join("backups", backup_filename)

                    with open(backup_path, 'w', encoding='utf-8') as f:
                        json.dump(backup_data, f, ensure_ascii=False, indent=2, default=str)

                    logger.info(f"Backup created: {backup_path}")

                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
                    await self._cleanup_old_backups()

            except asyncio.CancelledError:
                logger.info("Backup loop cancelled")
                break
            except Exception as e:
                logger.error(f"Backup error: {e}")

    async def stats_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("Stats loop started")

        while self.running:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤ 9:00
                now = datetime.now()
                next_report = now.replace(hour=9, minute=0, second=0, microsecond=0)
                if next_report <= now:
                    next_report += timedelta(days=1)

                sleep_seconds = (next_report - now).total_seconds()
                await asyncio.sleep(sleep_seconds)

                if config.get_notification_config()["daily_stats_report"]:
                    await self._send_daily_stats_report()

            except asyncio.CancelledError:
                logger.info("Stats loop cancelled")
                break
            except Exception as e:
                logger.error(f"Stats loop error: {e}")

    async def urgent_tickets_loop(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–æ—á–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
        logger.info("Urgent tickets monitoring started")

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(30 * 60)

                if config.get_notification_config()["notify_admins_urgent_tickets"]:
                    urgent_tickets = await self.database.get_tickets_requiring_attention()

                    if urgent_tickets:
                        await self._notify_admins_about_urgent_tickets(urgent_tickets)

            except asyncio.CancelledError:
                logger.info("Urgent tickets monitoring cancelled")
                break
            except Exception as e:
                logger.error(f"Urgent tickets monitoring error: {e}")

    async def _notify_admins_about_health_issues(self, health_status: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã"""
        try:
            message = f"""
üö® –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–°–¢–ï–ú–û–ô

‚è∞ –í—Ä–µ–º—è: {health_status['timestamp']}
ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {health_status['bot_status']}
üíæ –°—Ç–∞—Ç—É—Å –ë–î: {health_status['database_status']}

‚ùå –û—à–∏–±–∫–∏:
{chr(10).join(health_status.get('errors', []))}

üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
            """

            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, message)
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id} about health issues: {e}")

        except Exception as e:
            logger.error(f"Failed to notify admins about health issues: {e}")

    async def _notify_admins_about_urgent_tickets(self, urgent_tickets: list):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å—Ä–æ—á–Ω—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö"""
        try:
            if len(urgent_tickets) == 0:
                return

            message = f"""
üö® –°–†–û–ß–ù–´–ï –¢–ò–ö–ï–¢–´ ({len(urgent_tickets)})

–¢–∏–∫–µ—Ç—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤:
            """

            for ticket in urgent_tickets[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                hours = int(ticket['hours_since_last_message'])
                message += f"\nüî• #{ticket['id']} - {ticket['first_name']} ({hours}—á)"

            if len(urgent_tickets) > 5:
                message += f"\n... –∏ –µ—â–µ {len(urgent_tickets) - 5} —Ç–∏–∫–µ—Ç–æ–≤"

            message += f"\n\nüìù –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: /admin"

            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, message)
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id} about urgent tickets: {e}")

        except Exception as e:
            logger.error(f"Failed to notify admins about urgent tickets: {e}")

    async def _send_daily_stats_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        try:
            stats = await self.database.get_support_statistics()
            usage_stats = await self.database.get_usage_stats()
            feedback_stats = await self.database.get_feedback_stats()

            report = f"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ - {datetime.now().strftime('%d.%m.%Y')}

üé´ –ü–û–î–î–ï–†–ñ–ö–ê:
‚Ä¢ –ù–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {stats['tickets']['today']}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {stats['tickets']['open']}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['messages']['from_staff']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['response_time']['average_minutes']:.1f} –º–∏–Ω

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {usage_stats['total_users']}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {usage_stats['total_actions']}

üí≠ –û–¢–ó–´–í–´:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {feedback_stats['total']['total_feedback']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats['total']['average_rating']:.1f}/5

üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
            """

            for action in usage_stats['popular_actions'][:3]:
                report += f"‚Ä¢ {action['action']}: {action['count']}\n"

            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, report)
                except Exception as e:
                    logger.error(f"Failed to send daily report to admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Failed to send daily stats report: {e}")

    async def _cleanup_old_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            import os
            import glob
            from pathlib import Path

            retention_days = config.get_monitoring_config()["log_retention_days"]
            cutoff_date = datetime.now() - timedelta(days=retention_days)

            log_files = glob.glob("logs/*.log*")

            for log_file in log_files:
                file_path = Path(log_file)
                if file_path.stat().st_mtime < cutoff_date.timestamp():
                    os.remove(log_file)
                    logger.info(f"Removed old log file: {log_file}")

        except Exception as e:
            logger.error(f"Failed to cleanup old logs: {e}")

    async def _cleanup_old_stats(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            retention_days = config.get_monitoring_config()["stats_retention_days"]
            cutoff_date = datetime.now() - timedelta(days=retention_days)

            async with self.database.get_connection() as conn:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ usage_stats
                await conn.execute("""
                    DELETE FROM usage_stats 
                    WHERE created_at < $1
                """, cutoff_date)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ support_metrics
                await conn.execute("""
                    DELETE FROM support_metrics 
                    WHERE date < $1
                """, cutoff_date.date())

            logger.info(f"Cleaned up stats older than {retention_days} days")

        except Exception as e:
            logger.error(f"Failed to cleanup old stats: {e}")

    async def _auto_close_old_tickets(self):
        """–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
        try:
            auto_close_days = config.get_support_config()["auto_close_days"]
            cutoff_date = datetime.now() - timedelta(days=auto_close_days)

            async with self.database.get_connection() as conn:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è
                old_tickets = await conn.fetch("""
                    SELECT id, user_id FROM support_tickets 
                    WHERE is_closed = FALSE 
                    AND last_user_message_at < $1
                    AND last_staff_response_at IS NOT NULL
                """, cutoff_date)

                closed_count = 0
                for ticket in old_tickets:
                    success = await self.database.close_ticket(ticket['id'])
                    if success:
                        closed_count += 1

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await self.bot.send_message(
                                ticket['user_id'],
                                f"üìã –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ "
                                f"–∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                                f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: /start"
                            )
                        except Exception:
                            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞

                if closed_count > 0:
                    logger.info(f"Auto-closed {closed_count} old tickets")

        except Exception as e:
            logger.error(f"Failed to auto-close old tickets: {e}")

    async def _cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            import os
            import glob
            from pathlib import Path

            backup_files = sorted(glob.glob("backups/backup_*.json"), reverse=True)

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            for backup_file in backup_files[7:]:
                os.remove(backup_file)
                logger.info(f"Removed old backup: {backup_file}")

        except Exception as e:
            logger.error(f"Failed to cleanup old backups: {e}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        try:
            self.running = True
            logger.info("Starting bot polling...")

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.start_background_tasks()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            startup_message = f"""
üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {config.environment}
üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if config.debug_mode else '–û—Ç–∫–ª—é—á–µ–Ω'}
üìä –í–µ—Ä—Å–∏—è: 2.0 (—Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)

‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            """

            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, startup_message)
                except Exception as e:
                    logger.warning(f"Failed to notify admin {admin_id} about startup: {e}")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"Error during polling: {e}")
            raise
        finally:
            await self.cleanup()

    async def stop_background_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("Stopping background tasks...")
        self.running = False

        for task in self.background_tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        self.background_tasks.clear()
        logger.info("Background tasks stopped")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("Starting cleanup...")

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.stop_background_tasks()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if self.bot:
                shutdown_message = f"""
üõë –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üìä –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._get_uptime()}

üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...
                """

                for admin_id in config.ADMIN_IDS:
                    try:
                        await self.bot.send_message(admin_id, shutdown_message)
                    except Exception:
                        pass

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if self.data_backup:
                try:
                    logger.info("Creating final backup...")
                    backup_data = await self.data_backup.create_backup()

                    import json
                    import os

                    backup_filename = f"final_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    backup_path = os.path.join("backups", backup_filename)

                    with open(backup_path, 'w', encoding='utf-8') as f:
                        json.dump(backup_data, f, ensure_ascii=False, indent=2, default=str)

                    logger.info(f"Final backup created: {backup_path}")
                except Exception as e:
                    logger.error(f"Failed to create final backup: {e}")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
            if self.database:
                await self.database.close_pool()
                logger.info("Database connections closed")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("Bot session closed")

            logger.info("Cleanup completed successfully")

        except Exception as e:
            logger.error(f"Error during cleanup: {e}")

    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            import psutil
            import os

            process = psutil.Process(os.getpid())
            uptime_seconds = time.time() - process.create_time()
            uptime_td = timedelta(seconds=int(uptime_seconds))

            return str(uptime_td)
        except:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(sig, frame):
            logger.info(f"Received signal {sig}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è graceful shutdown
            asyncio.create_task(self.graceful_shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def graceful_shutdown(self):
        """–ü–ª–∞–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Initiating graceful shutdown...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.dp:
            await self.dp.stop_polling()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
        await asyncio.sleep(2)

        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await self.cleanup()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        logger.info("Graceful shutdown completed")
        sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger.info("Festival Bot starting up...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info(f"Environment: {config.environment}")
    logger.info(f"Debug mode: {config.debug_mode}")
    logger.info(f"Log level: {config.log_level}")
    logger.info(f"Database: {config.DB_HOST}:{config.DB_PORT}/{config.DB_NAME}")
    logger.info(f"Admins configured: {len(config.ADMIN_IDS)}")
    logger.info(f"Support staff configured: {len(config.SUPPORT_STAFF_IDS)}")

    bot = FestivalBot()

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        bot.setup_signal_handlers()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await bot.setup()

        # –ó–∞–ø—É—Å–∫ polling
        await bot.start_polling()

    except KeyboardInterrupt:
        logger.info("Bot stopped by user (Ctrl+C)")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        if bot.bot:
            error_message = f"""
üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
‚ùå –û—à–∏–±–∫–∞: {str(e)}

üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!
            """

            for admin_id in config.ADMIN_IDS:
                try:
                    await bot.bot.send_message(admin_id, error_message)
                except Exception:
                    pass
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if bot:
            await bot.cleanup()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ is required")
        sys.exit(1)

    # –ò–º–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è uptime
    import time

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"üí• Fatal error: {e}")
        sys.exit(1)