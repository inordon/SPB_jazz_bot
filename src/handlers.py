import asyncio
import logging
import re
from typing import Optional, Dict, Any
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

from config import config
from database import Database
from keyboards import Keyboards

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_message = State()
    active_ticket_dialog = State()
    waiting_for_new_ticket_email = State()
    waiting_for_new_ticket_message = State()

class FeedbackStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_rating = State()
    waiting_for_comment = State()

class AdminStates(StatesGroup):
    waiting_for_schedule_data = State()

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, database: Database, bot):
        self.db = database
        self.bot = bot
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(Command("menu"))(self.cmd_menu)
        self.router.message(Command("admin"))(self.cmd_admin)

        # Callback –∑–∞–ø—Ä–æ—Å—ã
        self.router.callback_query(F.data == "main_menu")(self.show_main_menu)
        self.router.callback_query(F.data == "schedule")(self.show_schedule)
        self.router.callback_query(F.data.startswith("schedule_day_"))(self.show_schedule_day)
        self.router.callback_query(F.data == "navigation")(self.show_navigation)
        self.router.callback_query(F.data == "map")(self.send_festival_map)
        self.router.callback_query(F.data.startswith("route_"))(self.show_location_map)
        self.router.callback_query(F.data == "tickets")(self.show_tickets)
        self.router.callback_query(F.data == "activities")(self.show_activities)
        self.router.callback_query(F.data == "workshops")(self.show_workshops)
        self.router.callback_query(F.data == "lectures")(self.show_lectures)
        self.router.callback_query(F.data == "support")(self.start_support)
        self.router.callback_query(F.data == "feedback")(self.start_feedback)
        self.router.callback_query(F.data.startswith("feedback_"))(self.select_feedback_category)
        self.router.callback_query(F.data.startswith("rating_"))(self.select_rating)
        self.router.callback_query(F.data == "skip_comment")(self.skip_feedback_comment)
        self.router.callback_query(F.data == "social")(self.show_social_networks)

        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.router.callback_query(F.data.startswith("continue_dialog_"))(self.continue_dialog)
        self.router.callback_query(F.data.startswith("show_history_"))(self.show_ticket_history)
        self.router.callback_query(F.data.startswith("close_ticket_"))(self.close_ticket_confirm)
        self.router.callback_query(F.data.startswith("confirm_close_"))(self.confirm_close_ticket)
        self.router.callback_query(F.data.startswith("back_to_ticket_"))(self.back_to_ticket)
        self.router.callback_query(F.data == "new_ticket")(self.start_new_ticket_flow)

        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        self.router.callback_query(F.data.startswith("admin_"))(self.handle_admin_actions)

        # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç—ã –≤ —Ç—Ä–µ–¥–∞—Ö)
        if config.SUPPORT_GROUP_ID:
            self.router.message(F.chat.id == int(config.SUPPORT_GROUP_ID))(self.handle_support_response)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.router.message(StateFilter(SupportStates.waiting_for_email))(self.process_support_email)
        self.router.message(StateFilter(SupportStates.waiting_for_message))(self.process_support_message)
        self.router.message(StateFilter(SupportStates.active_ticket_dialog))(self.process_active_dialog_message)
        self.router.message(StateFilter(SupportStates.waiting_for_new_ticket_email))(self.process_new_ticket_email)
        self.router.message(StateFilter(SupportStates.waiting_for_new_ticket_message))(self.process_new_ticket_message)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.router.message(StateFilter(FeedbackStates.waiting_for_comment))(self.process_feedback_comment)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message()(self.handle_unknown_message)

    async def _log_user_action(self, user_id: int, action: str, details: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.log_user_action(user_id, action, details)
        except Exception as e:
            logger.error(f"Failed to log user action: {e}")

    async def _update_user_info(self, message_or_query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = message_or_query.from_user
            await self.db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                language_code=user.language_code
            )
            await self.db.update_user_activity(user.id)
        except Exception as e:
            logger.error(f"Failed to update user info: {e}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await self._update_user_info(message)
            await self._log_user_action(message.from_user.id, "start_command")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            active_ticket = await self.db.get_user_active_ticket(message.from_user.id)
            has_active_ticket = active_ticket is not None

            welcome_text = f"""
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –§–µ—Å—Ç–∏–≤–∞–ª—å!

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
‚Ä¢ üó∫ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ
‚Ä¢ üé´ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
‚Ä¢ üé® –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
‚Ä¢ üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
            """

            if has_active_ticket:
                welcome_text += f"\nüî¥ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{active_ticket['id']} –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

            await message.answer(welcome_text, reply_markup=Keyboards.main_menu_with_support_indicator(has_active_ticket))

        except Exception as e:
            logger.error(f"Error in cmd_start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_menu(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await self.show_main_menu_message(message)

    async def cmd_admin(self, message: Message):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if message.from_user.id in config.ADMIN_IDS:
            await message.answer("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=Keyboards.admin_menu())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async def show_main_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (callback)"""
        await self._update_user_info(query)
        await self._log_user_action(query.from_user.id, "main_menu")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        active_ticket = await self.db.get_user_active_ticket(query.from_user.id)
        has_active_ticket = active_ticket is not None

        text = "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        if has_active_ticket:
            text += f"\n\nüî¥ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{active_ticket['id']} –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

        await query.message.edit_text(text, reply_markup=Keyboards.main_menu_with_support_indicator(has_active_ticket))
        await query.answer()

    async def show_main_menu_message(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        await self._update_user_info(message)
        await self._log_user_action(message.from_user.id, "main_menu")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        active_ticket = await self.db.get_user_active_ticket(message.from_user.id)
        has_active_ticket = active_ticket is not None

        text = "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        if has_active_ticket:
            text += f"\n\nüî¥ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{active_ticket['id']} –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

        await message.answer(text, reply_markup=Keyboards.main_menu_with_support_indicator(has_active_ticket))

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    async def show_schedule(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        await self._log_user_action(query.from_user.id, "schedule_menu")

        text = """
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–§–µ—Å—Ç–∏–≤–∞–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç 5 –¥–Ω–µ–π.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.schedule_days())
        await query.answer()

    async def show_schedule_day(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        day = int(query.data.split("_")[-1])
        await self._log_user_action(query.from_user.id, "schedule_day", {"day": day})

        try:
            schedule = await self.db.get_schedule_by_day(day)

            if schedule:
                text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –î–µ–Ω—å {day}\n\n"
                for item in schedule:
                    text += f"üïê {item['time'].strftime('%H:%M')} - {item['artist_name']}\n"
                    text += f"üé™ –°—Ü–µ–Ω–∞: {item['stage']}\n"
                    if item['description']:
                        text += f"üìù {item['description']}\n"
                    text += "\n"
            else:
                text = f"üìÖ –î–µ–Ω—å {day}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="schedule")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)
            await query.answer()

        except Exception as e:
            logger.error(f"Error showing schedule day {day}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    async def show_navigation(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        await self._log_user_action(query.from_user.id, "navigation_menu")

        text = """
üó∫ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
‚Ä¢ –û–±—â–∞—è –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        """

        await query.message.edit_text(text, reply_markup=Keyboards.navigation_menu())
        await query.answer()

    async def send_festival_map(self, query: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π –∫–∞—Ä—Ç—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"""
        await self._log_user_action(query.from_user.id, "festival_map")

        try:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
            route_url = config.get_yandex_route_url(config.FESTIVAL_COORDINATES)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            try:
                map_image = FSInputFile(config.MAPS_IMAGES["festival_map"])
                await query.message.answer_photo(
                    photo=map_image,
                    caption="üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                            "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                            "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä\n"
                            "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä\n"
                            "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ–∫\n"
                            "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥\n"
                            "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - –≤—Ö–æ–¥\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await query.message.edit_text(
                    "üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                    "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                    "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞\n"
                    "‚Ä¢ –¢—É–∞–ª–µ—Ç—ã - –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É\n"
                    "‚Ä¢ –ú–µ–¥–ø—É–Ω–∫—Ç - —Ä—è–¥–æ–º —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–æ–π\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error sending festival map: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã", show_alert=True)

        await query.answer()

    async def show_location_map(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        location = query.data.split("_", 1)[1]
        await self._log_user_action(query.from_user.id, "location_map", {"location": location})

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        locations_info = {
            "foodcourt": {
                "title": "üçï –§—É–¥–∫–æ—Ä—Ç",
                "description": "–ó–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏",
                "details": [
                    "üçï –ü–∏—Ü—Ü–∞ –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è",
                    "üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Ñ–∞—Å—Ç-—Ñ—É–¥",
                    "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                    "‚òï –ö–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏",
                    "üç∞ –î–µ—Å–µ—Ä—Ç—ã –∏ –≤—ã–ø–µ—á–∫–∞"
                ]
            },
            "workshops": {
                "title": "üé® –ó–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏",
                "details": [
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    "üé§ –í–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
                    "üíª –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
                    "‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω",
                    "üéß –ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–∞"
                ]
            },
            "souvenirs": {
                "title": "üõç –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã",
                "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∏",
                    "üß¢ –ö–µ–ø–∫–∏ –∏ –≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
                    "üìÄ –î–∏—Å–∫–∏ –∏ –≤–∏–Ω–∏–ª",
                    "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã"
                ]
            },
            "toilets": {
                "title": "üöª –¢—É–∞–ª–µ—Ç—ã",
                "description": "–°–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üöπ –ú—É–∂—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "üö∫ –ñ–µ–Ω—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "‚ôø –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                    "üë∂ –ü–µ–ª–µ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã",
                    "üßº –£–º—ã–≤–∞–ª—å–Ω–∏–∫–∏"
                ]
            },
            "medical": {
                "title": "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã",
                "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å",
                "details": [
                    "ü©∫ –í—Ä–∞—á–∏ –∏ –º–µ–¥—Å–µ—Å—Ç—Ä—ã",
                    "üíä –ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã",
                    "üöë –°–≤—è–∑—å —Å —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â—å—é",
                    "üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: 112",
                    "‚öïÔ∏è –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"
                ]
            }
        }

        location_info = locations_info.get(location)
        if not location_info:
            await query.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
            coords = config.LOCATIONS_COORDINATES.get(location, config.FESTIVAL_COORDINATES)
            route_url = config.get_yandex_route_url(coords)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            details_text = "\n".join([f"‚Ä¢ {detail}" for detail in location_info["details"]])
            caption_text = f"**{location_info['title']}**\n\n" \
                           f"{location_info['description']}\n\n" \
                           f"üìã **–ß—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å:**\n{details_text}\n\n" \
                           f"–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                map_image_path = config.MAPS_IMAGES.get(location)
                if map_image_path:
                    map_image = FSInputFile(map_image_path)
                    await query.message.answer_photo(
                        photo=map_image,
                        caption=caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await query.message.edit_text(
                        caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await query.message.edit_text(
                    caption_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error showing location map for {location}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏", show_alert=True)

        await query.answer()

    # –ë–∏–ª–µ—Ç—ã
    async def show_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö"""
        await self._log_user_action(query.from_user.id, "tickets_menu")

        text = """
üé´ –ë–∏–ª–µ—Ç—ã –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å

–î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤:
‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç (1 –¥–µ–Ω—å)
‚Ä¢ –°–µ–º–µ–π–Ω—ã–π –±–∏–ª–µ—Ç (5 —á–µ–ª–æ–≤–µ–∫)  
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã (2, 3, 5 –¥–Ω–µ–π)

üí° –í—Å–µ –±–∏–ª–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞–º
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–æ–Ω–∞–º –æ—Ç–¥—ã—Ö–∞

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
        """

        await query.message.edit_text(text, reply_markup=Keyboards.tickets_menu())
        await query.answer()

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    async def show_activities(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        await self._log_user_action(query.from_user.id, "activities_menu")

        text = """
üé® –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–ù–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

üé® **–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã
üéì **–õ–µ–∫—Ç–æ—Ä–∏–π** - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ–∫—Ü–∏–∏ –∏ —Å–µ–º–∏–Ω–∞—Ä—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.activities_menu())
        await query.answer()

    async def show_workshops(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö"""
        await self._log_user_action(query.from_user.id, "workshops_info")

        text = """
üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ 12:00-13:30 - "–û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
‚Ä¢ 14:00-15:30 - "–°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
‚Ä¢ 16:00-17:30 - "–í–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
‚Ä¢ 18:00-19:30 - "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω"

üìç –õ–æ–∫–∞—Ü–∏—è: –ë–µ–ª—ã–µ —à–∞—Ç—Ä—ã (–∑–∞–ø–∞–¥–Ω–∞—è –∑–æ–Ω–∞)

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –¥–æ 20 —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ
üé´ –°—Ç–æ–∏–º–æ—Å—Ç—å: –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–∏–ª–µ—Ç
üìù –ó–∞–ø–∏—Å—å: —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤ —à–∞—Ç—Ä–µ

üéÅ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç:
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚Ä¢ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ó–∞–ø–∏—Å—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="workshop_register")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º", callback_data="activities")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    async def show_lectures(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–∫—Ç–æ—Ä–∏–∏"""
        await self._log_user_action(query.from_user.id, "lectures_info")

        text = """
üéì –õ–µ–∫—Ç–æ—Ä–∏–π

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:
‚Ä¢ 10:00-11:00 - "–ò—Å—Ç–æ—Ä–∏—è –¥–∂–∞–∑–∞: –æ—Ç –∏—Å—Ç–æ–∫–æ–≤ –¥–æ –Ω–∞—à–∏—Ö –¥–Ω–µ–π"
‚Ä¢ 11:30-12:30 - "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è —Å–µ–≥–æ–¥–Ω—è"
‚Ä¢ 13:00-14:00 - "–ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ –≤ –º—É–∑—ã–∫–µ"
‚Ä¢ 15:00-16:00 - "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"
‚Ä¢ 16:30-17:30 - "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–Ω—Ç–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —ç–ø–æ—Ö—É"

üìç –õ–æ–∫–∞—Ü–∏—è: –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ª (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –¥–æ 100 —á–µ–ª–æ–≤–µ–∫
üé´ –°—Ç–æ–∏–º–æ—Å—Ç—å: –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–∏–ª–µ—Ç
üìù –ó–∞–ø–∏—Å—å: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥

üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –ª–µ–∫—Ü–∏–π
‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ Networking —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏

üí° –õ–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–µ–∫—Ü–∏–π", callback_data="lectures_schedule")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º", callback_data="activities")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    # ================== –ü–û–î–î–ï–†–ñ–ö–ê V2 (–° –î–ò–ê–õ–û–ì–ê–ú–ò) ==================

    async def start_support(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"""
        await self._log_user_action(query.from_user.id, "support_start")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        active_ticket = await self.db.get_user_active_ticket(query.from_user.id)

        if active_ticket:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
            await self._show_active_ticket(query, active_ticket, state)
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            await self._start_new_ticket(query, state)

    async def _show_active_ticket(self, query: CallbackQuery, ticket: Dict, state: FSMContext):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏"""
        ticket_id = ticket['id']
        created_date = ticket['created_at'].strftime('%d.%m.%Y %H:%M')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ticket_with_messages = await self.db.get_ticket_with_last_messages(ticket_id, 3)

        text = f"""
üí¨ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}

üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_date}
üìß Email: {ticket['email']}
üìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ticket['message'][:100]}{'...' if len(ticket['message']) > 100 else ''}

üí≠ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
        """

        if ticket_with_messages and ticket_with_messages.get('messages'):
            for msg in ticket_with_messages['messages'][-3:]:
                sender = "üßë‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if msg['is_staff'] else "üë§ –í—ã"
                msg_text = msg['message_text'][:50] if msg['message_text'] else "[–ú–µ–¥–∏–∞]"
                msg_time = msg['created_at'].strftime('%H:%M')
                text += f"\n{sender} ({msg_time}): {msg_text}{'...' if len(msg.get('message_text', '')) > 50 else ''}"

        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                                  callback_data=f"continue_dialog_{ticket_id}")],
            [InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                                  callback_data=f"show_history_{ticket_id}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                                  callback_data=f"close_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                                  callback_data="new_ticket")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)

    async def _start_new_ticket(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞"""
        text = """
üÜò –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è

–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–æ:
1. –í–∞—à email –¥–ª—è —Å–≤—è–∑–∏
2. –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.back_to_main())
        await state.set_state(SupportStates.waiting_for_email)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    async def continue_dialog(self, query: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∏–∫–µ—Ç—É"""
        ticket_id = int(query.data.split("_")[-1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        rate_check = await self.db.check_rate_limit(query.from_user.id)
        if not rate_check["can_send"]:
            await query.answer(rate_check["reason"], show_alert=True)
            return

        await state.update_data(active_ticket_id=ticket_id)
        await state.set_state(SupportStates.active_ticket_dialog)

        text = f"""
üí¨ –î–∏–∞–ª–æ–≥ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ –í–∏–¥–µ–æ

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                                  callback_data=f"show_history_{ticket_id}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                                  callback_data=f"close_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–∫–µ—Ç—É",
                                  callback_data=f"back_to_ticket_{ticket_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    async def show_ticket_history(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞"""
        ticket_id = int(query.data.split("_")[-1])

        try:
            messages = await self.db.get_ticket_messages(ticket_id, limit=20)

            if not messages:
                await query.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞", show_alert=True)
                return

            text = f"üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{ticket_id}\n\n"

            for msg in messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                sender_icon = "üßë‚Äçüíº" if msg['is_staff'] else "üë§"
                sender_name = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" if msg['is_staff'] else "–í—ã"
                time_str = msg['created_at'].strftime('%d.%m %H:%M')

                if msg['message_text']:
                    msg_preview = msg['message_text'][:100]
                    if len(msg['message_text']) > 100:
                        msg_preview += "..."
                else:
                    msg_preview = f"[{msg['message_type'].upper()}]"

                text += f"{sender_icon} {sender_name} ({time_str}):\n{msg_preview}\n\n"

            if len(messages) > 10:
                text += f"... –∏ –µ—â–µ {len(messages) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                                      callback_data=f"continue_dialog_{ticket_id}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–∫–µ—Ç—É",
                                      callback_data=f"back_to_ticket_{ticket_id}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing ticket history: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

    async def close_ticket_confirm(self, query: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
        ticket_id = int(query.data.split("_")[-1])

        text = f"""
‚ùì –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}?

–ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è:
‚Ä¢ –î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ

–í—ã —É–≤–µ—Ä–µ–Ω—ã?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å",
                                  callback_data=f"confirm_close_{ticket_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",
                                  callback_data=f"back_to_ticket_{ticket_id}")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)

    async def confirm_close_ticket(self, query: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
        ticket_id = int(query.data.split("_")[-1])

        try:
            success = await self.db.close_ticket(ticket_id, query.from_user.id)

            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                await self._notify_support_ticket_closed(ticket_id, query.from_user)

                text = f"""
‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–æ

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! 
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.

üåü –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ "üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
                """

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_ticket")],
                    [InlineKeyboardButton(text="üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])

                await query.message.edit_text(text, reply_markup=keyboard)
                await state.clear()

            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞", show_alert=True)

        except Exception as e:
            logger.error(f"Error closing ticket {ticket_id}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞", show_alert=True)

    async def back_to_ticket(self, query: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–∏–∫–µ—Ç–∞"""
        ticket_id = int(query.data.split("_")[-1])

        try:
            ticket = await self.db.get_ticket_with_last_messages(ticket_id, 3)
            if ticket:
                await self._show_active_ticket(query, ticket, state)
            else:
                await query.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                await self.show_main_menu(query)
        except Exception as e:
            logger.error(f"Error returning to ticket {ticket_id}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–∞", show_alert=True)

    async def start_new_ticket_flow(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ (callback)"""
        await state.clear()
        await self._start_new_ticket(query, state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    async def process_support_email(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        email = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email or "." not in email:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n–ü—Ä–∏–º–µ—Ä: your@email.com",
                reply_markup=Keyboards.back_to_main()
            )
            return

        await state.update_data(email=email)
        await message.answer(
            f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ:",
            reply_markup=Keyboards.back_to_main()
        )
        await state.set_state(SupportStates.waiting_for_message)

    async def process_support_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            data = await state.get_data()
            email = data.get("email")

            message_text = message.text or message.caption or ""
            photo_file_id = message.photo[-1].file_id if message.photo else None
            document_file_id = message.document.file_id if message.document else None
            video_file_id = message.video.file_id if message.video else None

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –ë–î
            ticket_id = await self.db.create_support_ticket_v2(
                user_id=message.from_user.id,
                email=email,
                message=message_text,
                photo_file_id=photo_file_id,
                document_file_id=document_file_id,
                video_file_id=video_file_id
            )

            await self._log_user_action(message.from_user.id, "support_ticket_created",
                                        {"ticket_id": ticket_id})

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–µ–¥–∞
            thread_id, initial_message_id = await self._send_to_support_group_v2(
                ticket_id, message, email, message_text, photo_file_id, document_file_id, video_file_id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–¥–µ
            if thread_id and initial_message_id:
                await self.db.update_ticket_thread_info(ticket_id, thread_id, initial_message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                "‚è± –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.\n"
                "üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç –æ—Ç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                "üîî –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç!\n\n"
                "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —ç—Ç–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                                          callback_data=f"continue_dialog_{ticket_id}")],
                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="main_menu")]
                ])
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            await state.update_data(active_ticket_id=ticket_id)
            await state.set_state(SupportStates.active_ticket_dialog)

        except Exception as e:
            logger.error(f"Error processing support message: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_to_main()
            )
            await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
    async def process_active_dialog_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
            rate_check = await self.db.check_rate_limit(message.from_user.id)
            if not rate_check["can_send"]:
                await message.answer(
                    f"‚è≥ {rate_check['reason']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {rate_check['wait_seconds']} —Å–µ–∫—É–Ω–¥.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                return

            data = await state.get_data()
            ticket_id = data.get("active_ticket_id")

            if not ticket_id:
                await state.clear()
                await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
                                     reply_markup=Keyboards.main_menu())
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
            photo_file_id = message.photo[-1].file_id if message.photo else None
            document_file_id = message.document.file_id if message.document else None
            video_file_id = message.video.file_id if message.video else None
            message_text = message.text or message.caption or ""

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–∏–∫–µ—Ç—É
            message_id = await self.db.add_ticket_message(
                ticket_id=ticket_id,
                user_id=message.from_user.id,
                message_text=message_text,
                photo_file_id=photo_file_id,
                document_file_id=document_file_id,
                video_file_id=video_file_id,
                is_staff=False
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await self._send_dialog_message_to_support(ticket_id, message, message_text,
                                                       photo_file_id, document_file_id, video_file_id)

            await self._log_user_action(message.from_user.id, "support_dialog_message",
                                        {"ticket_id": ticket_id, "message_id": message_id})

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                                      callback_data=f"show_history_{ticket_id}")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
                                      callback_data=f"close_ticket_{ticket_id}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
                f"üí¨ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.\n"
                f"üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç –æ—Ç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
                f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ.",
                reply_markup=keyboard
            )

        except Exception as e:
            logger.error(f"Error processing dialog message: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_to_main()
            )

    async def _send_dialog_message_to_support(self, ticket_id: int, message: Message,
                                              message_text: str, photo_file_id: str = None,
                                              document_file_id: str = None, video_file_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if not config.SUPPORT_GROUP_ID:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è thread_id
            ticket = await self.db.get_ticket_by_thread(ticket_id)
            thread_id = ticket.get('thread_id') if ticket else None

            user = message.from_user
            support_text = f"""
üí¨ –°–û–û–ë–©–ï–ù–ò–ï –í –î–ò–ê–õ–û–ì–ï #{ticket_id}

üë§ –û—Ç: {user.first_name} {user.last_name or ''}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

üìù –û—Ç–≤–µ—Ç—å—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –≤ –æ–±—â–∏–π —á–∞—Ç
            if thread_id and config.SUPPORT_GROUP_TOPICS:
                if photo_file_id:
                    await self.bot.send_photo(
                        config.SUPPORT_GROUP_ID,
                        photo_file_id,
                        caption=support_text,
                        message_thread_id=thread_id
                    )
                elif document_file_id:
                    await self.bot.send_document(
                        config.SUPPORT_GROUP_ID,
                        document_file_id,
                        caption=support_text,
                        message_thread_id=thread_id
                    )
                elif video_file_id:
                    await self.bot.send_video(
                        config.SUPPORT_GROUP_ID,
                        video_file_id,
                        caption=support_text,
                        message_thread_id=thread_id
                    )
                else:
                    await self.bot.send_message(
                        config.SUPPORT_GROUP_ID,
                        support_text,
                        message_thread_id=thread_id
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç –≥—Ä—É–ø–ø—ã
                if photo_file_id:
                    await self.bot.send_photo(config.SUPPORT_GROUP_ID, photo_file_id, caption=support_text)
                elif document_file_id:
                    await self.bot.send_document(config.SUPPORT_GROUP_ID, document_file_id, caption=support_text)
                elif video_file_id:
                    await self.bot.send_video(config.SUPPORT_GROUP_ID, video_file_id, caption=support_text)
                else:
                    await self.bot.send_message(config.SUPPORT_GROUP_ID, support_text)

        except Exception as e:
            logger.error(f"Failed to send dialog message to support group: {e}")

    async def _send_to_support_group_v2(self, ticket_id: int, message: Message,
                                        email: str, message_text: str, photo_file_id: str = None,
                                        document_file_id: str = None, video_file_id: str = None) -> tuple:
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not config.SUPPORT_GROUP_ID:
            return None, None

        try:
            user = message.from_user
            media_info = ""
            if photo_file_id:
                media_info = "üì∑ + –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
            elif document_file_id:
                media_info = "üìÑ + –î–æ–∫—É–º–µ–Ω—Ç"
            elif video_file_id:
                media_info = "üé• + –í–∏–¥–µ–æ"

            support_text = f"""
üÜò –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï #{ticket_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''}
üìß Email: {email}
üÜî User ID: {user.id}
üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

{media_info}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–û–í:
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ - –æ—Ç–≤–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–π–¥—É—Ç –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏" (–∞–Ω–æ–Ω–∏–º–Ω–æ)
‚Ä¢ –î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

‚ö†Ô∏è –ü–†–ê–í–ê –ù–ê –û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            """

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
            sent_message = None
            if photo_file_id:
                sent_message = await self.bot.send_photo(
                    config.SUPPORT_GROUP_ID,
                    photo_file_id,
                    caption=support_text
                )
            elif document_file_id:
                sent_message = await self.bot.send_document(
                    config.SUPPORT_GROUP_ID,
                    document_file_id,
                    caption=support_text
                )
            elif video_file_id:
                sent_message = await self.bot.send_video(
                    config.SUPPORT_GROUP_ID,
                    video_file_id,
                    caption=support_text
                )
            else:
                sent_message = await self.bot.send_message(
                    config.SUPPORT_GROUP_ID,
                    support_text
                )

            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ø–∏–∫–∏, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
            thread_id = None
            if config.SUPPORT_GROUP_TOPICS:
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ (—Ñ–æ—Ä—É–º-—Ç–æ–ø–∏–∫–∞)
                    forum_topic = await self.bot.create_forum_topic(
                        chat_id=config.SUPPORT_GROUP_ID,
                        name=f"–¢–∏–∫–µ—Ç #{ticket_id} - {user.first_name}",
                        icon_color=0xFF5722  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
                    )
                    thread_id = forum_topic.message_thread_id

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç—Ä–µ–¥
                    detailed_info = f"""
üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ò–ö–ï–¢–ï #{ticket_id}

üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:
‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: {user.id}
‚Ä¢ Email: {email}

üí¨ –ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
{message_text}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä –°–¢–ê–¢–£–°: –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
üéØ –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—ã—á–Ω—ã–π (–æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí¨ –ù–ê–ß–ò–ù–ê–ô–¢–ï –î–ò–ê–õ–û–ì - –æ—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ
                    """

                    thread_message = None
                    if photo_file_id:
                        thread_message = await self.bot.send_photo(
                            config.SUPPORT_GROUP_ID,
                            photo_file_id,
                            caption=detailed_info,
                            message_thread_id=thread_id
                        )
                    elif document_file_id:
                        thread_message = await self.bot.send_document(
                            config.SUPPORT_GROUP_ID,
                            document_file_id,
                            caption=detailed_info,
                            message_thread_id=thread_id
                        )
                    elif video_file_id:
                        thread_message = await self.bot.send_video(
                            config.SUPPORT_GROUP_ID,
                            video_file_id,
                            caption=detailed_info,
                            message_thread_id=thread_id
                        )
                    else:
                        thread_message = await self.bot.send_message(
                            config.SUPPORT_GROUP_ID,
                            detailed_info,
                            message_thread_id=thread_id
                        )

                    return thread_id, thread_message.message_id

                except Exception as e:
                    logger.error(f"Failed to create forum topic: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return None, sent_message.message_id

            return None, sent_message.message_id

        except Exception as e:
            logger.error(f"Failed to send to support group: {e}")
            return None, None

    async def handle_support_response(self, message: Message):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥–µ –∏–ª–∏ –µ—Å—Ç—å reply
        if not message.message_thread_id and not message.reply_to_message:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        is_admin = user_id in config.ADMIN_IDS
        is_support_staff = user_id in config.SUPPORT_STAFF_IDS

        if not (is_admin or is_support_staff):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        try:
            ticket = None

            # –ò—â–µ–º —Ç–∏–∫–µ—Ç –ø–æ thread_id –∏–ª–∏ –ø–æ reply
            if message.message_thread_id:
                ticket = await self.db.get_ticket_by_thread(message.message_thread_id)
            elif message.reply_to_message:
                # –ò—â–µ–º —Ç–∏–∫–µ—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É replied —Å–æ–æ–±—â–µ–Ω–∏—è
                replied_text = message.reply_to_message.text or message.reply_to_message.caption or ""
                if "–û–ë–†–ê–©–ï–ù–ò–ï #" in replied_text or "–î–ò–ê–õ–û–ì–ï #" in replied_text:
                    ticket_match = re.search(r'#(\d+)', replied_text)
                    if ticket_match:
                        ticket_id = int(ticket_match.group(1))
                        ticket = await self.db.get_ticket_with_last_messages(ticket_id, 1)

            if not ticket:
                logger.warning(f"Ticket not found for message from user {user_id}")
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç
            if ticket.get('is_closed'):
                await message.reply(f"‚ö†Ô∏è –¢–∏–∫–µ—Ç #{ticket['id']} —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if is_admin:
                sender_role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ü–æ–¥–¥–µ—Ä–∂–∫–∏"
                role_emoji = "üë®‚Äçüíº"
            else:
                sender_role = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∏"
                role_emoji = "üßë‚Äçüíº"

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            response_text = message.text or message.caption or ""
            photo_file_id = message.photo[-1].file_id if message.photo else None
            document_file_id = message.document.file_id if message.document else None
            video_file_id = message.video.file_id if message.video else None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
            await self.db.add_ticket_message(
                ticket_id=ticket['id'],
                user_id=user_id,
                message_text=response_text,
                photo_file_id=photo_file_id,
                document_file_id=document_file_id,
                video_file_id=video_file_id,
                is_staff=True,
                is_admin=is_admin,
                thread_message_id=message.message_id
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
            response_for_user = f"""
üÜò –û—Ç–≤–µ—Ç –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket['id']}

{role_emoji} –û—Ç: {sender_role}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ –û—Ç–≤–µ—Ç:
{response_text}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
‚úÖ –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /start ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Üí –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ

üí° –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É: /start ‚Üí üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç
            try:
                if photo_file_id:
                    await self.bot.send_photo(
                        ticket['user_id'],
                        photo_file_id,
                        caption=response_for_user
                    )
                elif document_file_id:
                    await self.bot.send_document(
                        ticket['user_id'],
                        document_file_id,
                        caption=response_for_user
                    )
                elif video_file_id:
                    await self.bot.send_video(
                        ticket['user_id'],
                        video_file_id,
                        caption=response_for_user
                    )
                else:
                    await self.bot.send_message(
                        ticket['user_id'],
                        response_for_user
                    )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                real_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                confirm_text = f"""
‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket['first_name']} (ID: {ticket['user_id']})
üìù –û—Ç: {real_name} ({sender_role})
üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç "{sender_role}"

üí¨ –î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
üìä –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                """

                await message.reply(confirm_text)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏
                await self._log_user_action(
                    user_id,
                    "support_response_sent",
                    {
                        "ticket_id": ticket['id'],
                        "user_id": ticket['user_id'],
                        "is_admin": is_admin,
                        "role": sender_role,
                        "has_media": bool(photo_file_id or document_file_id or video_file_id)
                    }
                )

            except Exception as e:
                logger.error(f"Failed to send response to user {ticket['user_id']}: {e}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–¥–µ
                error_message = f"""
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket['first_name']} {ticket['last_name'] or ''}
üÜî User ID: {ticket['user_id']}
üìß Email: {ticket['email']}
‚ùå –û—à–∏–±–∫–∞: {str(e)}

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç  
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

üìß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ email: {ticket['email']}

üîß –¢–∏–∫–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º - –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–∑–∂–µ
                """

                await message.reply(error_message)

        except Exception as e:
            logger.error(f"Error handling support response: {e}")
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞\n"
                f"üìù –î–µ—Ç–∞–ª–∏: {str(e)}\n"
                f"üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )

    async def _notify_support_ticket_closed(self, ticket_id: int, user):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞"""
        if not config.SUPPORT_GROUP_ID:
            return

        try:
            notification_text = f"""
‚úÖ –¢–ò–ö–ï–¢ #{ticket_id} –ó–ê–ö–†–´–¢

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''}
üÜî User ID: {user.id}
‚è∞ –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            """

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –¥–ª—è thread_id
            ticket = await self.db.get_ticket_by_thread(ticket_id)
            thread_id = ticket.get('thread_id') if ticket else None

            if thread_id and config.SUPPORT_GROUP_TOPICS:
                await self.bot.send_message(
                    config.SUPPORT_GROUP_ID,
                    notification_text,
                    message_thread_id=thread_id
                )
            else:
                await self.bot.send_message(config.SUPPORT_GROUP_ID, notification_text)

        except Exception as e:
            logger.error(f"Failed to notify support about ticket closure: {e}")

    # ================== –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ (–û–ë–ù–û–í–õ–ï–ù–û) ==================

    async def start_feedback(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        await self._log_user_action(query.from_user.id, "feedback_start")

        text = """
üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.feedback_categories())
        await state.set_state(FeedbackStates.waiting_for_category)
        await query.answer()

    async def select_feedback_category(self, query: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        category = query.data.replace("feedback_", "")

        categories = {
            "festival": "–§–µ—Å—Ç–∏–≤–∞–ª—å –≤ —Ü–µ–ª–æ–º",
            "food": "–§—É–¥–∫–æ—Ä—Ç—ã",
            "workshops": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã",
            "lectures": "–õ–µ–∫—Ç–æ—Ä–∏–π",
            "infrastructure": "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
        }

        category_name = categories.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

        await state.update_data(category=category, category_name=category_name)

        text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}

–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.rating_keyboard())
        await state.set_state(FeedbackStates.waiting_for_rating)
        await query.answer()

    async def select_rating(self, query: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏"""
        rating = int(query.data.replace("rating_", ""))

        data = await state.get_data()
        category_name = data.get("category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

        await state.update_data(rating=rating)

        stars = "‚≠ê" * rating

        # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        if rating <= 2:
            text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}
üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)

üòî –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?
–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é:
            """
        elif rating == 3:
            text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}
üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)

–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É! 

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:
            """
        else:  # rating >= 4
            text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}
üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)

üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞–º –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
            """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                  callback_data="skip_comment")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(FeedbackStates.waiting_for_comment)
        await query.answer()

    async def process_feedback_comment(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
        await self._save_feedback(message, state, message.text)

    async def skip_feedback_comment(self, query: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
        await self._save_feedback(query, state, None)

    async def _save_feedback(self, message_or_query, state: FSMContext, comment: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö"""
        try:
            data = await state.get_data()
            category = data.get("category")
            category_name = data.get("category_name")
            rating = data.get("rating")
            user_id = message_or_query.from_user.id
            user = message_or_query.from_user

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            await self.db.add_feedback(user_id, category, rating, comment)

            await self._log_user_action(user_id, "feedback_submitted", {
                "category": category,
                "rating": rating,
                "has_comment": bool(comment),
                "is_critical": rating <= 2
            })

            # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ó–´–í–´ (—Ä–µ–π—Ç–∏–Ω–≥ 1-2)
            if rating <= 2:
                await self._handle_critical_feedback(user, category, category_name, rating, comment)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤ (–æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if config.FEEDBACK_CHANNEL_ID:
                await self._send_feedback_to_channel(user, category_name, rating, comment)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success_text = await self._generate_feedback_response(category_name, rating, comment)

            if hasattr(message_or_query, 'answer'):
                await message_or_query.answer(success_text, reply_markup=Keyboards.back_to_main())
            else:
                await message_or_query.message.edit_text(success_text,
                                                         reply_markup=Keyboards.back_to_main())

            await state.clear()

        except Exception as e:
            logger.error(f"Error saving feedback: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            if hasattr(message_or_query, 'answer'):
                await message_or_query.answer(error_text, reply_markup=Keyboards.back_to_main())
            else:
                await message_or_query.message.edit_text(error_text,
                                                         reply_markup=Keyboards.back_to_main())
            await state.clear()

    async def _handle_critical_feedback(self, user, category: str, category_name: str,
                                        rating: int, comment: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥ 1-2)"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            if rating == 1:
                severity = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
                priority = "–í–´–°–û–ö–ò–ô"
                emoji = "üö®"
            else:  # rating == 2
                severity = "üü° –ù–ò–ó–ö–ò–ô"
                priority = "–°–†–ï–î–ù–ò–ô"
                emoji = "‚ö†Ô∏è"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            critical_message = f"""
{emoji} {severity} –û–¢–ó–´–í

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {"‚≠ê" * rating} ({rating}/5)
‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚Ä¢ –ò–º—è: {user.first_name} {user.last_name or ''}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: {user.id}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
{comment or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:
"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            recommendations = self._get_category_recommendations(category, rating)
            critical_message += "\n".join([f"‚Ä¢ {rec}" for rec in recommendations])

            critical_message += f"""

üìû –ö–û–ù–¢–ê–ö–¢ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú:
‚Ä¢ Telegram: @{user.username or '–Ω–µ—Ç username'}
‚Ä¢ ID –¥–ª—è —Å–≤—è–∑–∏: {user.id}
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

üí° –≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, critical_message)
                    logger.info(f"Critical feedback notification sent to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Failed to send critical feedback notification to admin {admin_id}: {e}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Ç—É–¥–∞
            if config.SUPPORT_GROUP_ID:
                try:
                    group_message = f"""
{emoji} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ó–´–í –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø

üìä {category_name}: {"‚≠ê" * rating} ({rating}/5)
üë§ {user.first_name} (@{user.username or '–Ω–µ—Ç username'})

üí¨ "{comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"

üéØ –ö—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã?
                    """

                    await self.bot.send_message(config.SUPPORT_GROUP_ID, group_message)
                    logger.info("Critical feedback notification sent to support group")
                except Exception as e:
                    logger.error(f"Failed to send critical feedback notification to support group: {e}")

            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∑—ã–≤
            stats_logger = logging.getLogger('stats')
            stats_logger.warning(f"Critical feedback: user_id={user.id}, category={category}, rating={rating}, comment_length={len(comment or '')}")

        except Exception as e:
            logger.error(f"Failed to handle critical feedback: {e}")

    def _get_category_recommendations(self, category: str, rating: int) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        base_recommendations = [
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã"
        ]

        category_specific = {
            "festival": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–ª–æ–±—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–æ–º—Ñ–æ—Ä—Ç",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–ª—É–∂–±"
            ],
            "food": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ—É–¥–∫–æ—Ä—Ç–µ",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É"
            ],
            "workshops": [
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–µ–¥—É—â–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤"
            ],
            "lectures": [
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–µ–∫—Ç–æ—Ä–∞–º–∏",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ª–µ–∫—Ç–æ—Ä–∏—è"
            ],
            "infrastructure": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–æ–≤ –∏ –º–µ–¥–ø—É–Ω–∫—Ç–æ–≤",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"
            ]
        }

        recommendations = base_recommendations.copy()
        if category in category_specific:
            recommendations.extend(category_specific[category])

        # –î–ª—è –æ—Å–æ–±–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (—Ä–µ–π—Ç–∏–Ω–≥ 1)
        if rating == 1:
            recommendations.extend([
                "üö® –°–†–û–ß–ù–û: –ü—Ä–∏–Ω—è—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –º–µ—Ä—ã",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏",
                "–ü—É–±–ª–∏—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É (–µ—Å–ª–∏ —ç—Ç–æ –æ–ø—Ä–∞–≤–¥–∞–Ω–æ)"
            ])

        return recommendations

    async def _send_feedback_to_channel(self, user, category_name: str, rating: int, comment: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            stars = "‚≠ê" * rating

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫
            rating_indicator = ""
            if rating <= 2:
                rating_indicator = " üö®"
            elif rating == 3:
                rating_indicator = " ‚ö†Ô∏è"
            elif rating >= 4:
                rating_indicator = " ‚ú®"

            feedback_text = f"""
üí≠ –ù–û–í–´–ô –û–¢–ó–´–í{rating_indicator}

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üë§ –û—Ç: {user.first_name}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
{comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """

            await self.bot.send_message(config.FEEDBACK_CHANNEL_ID, feedback_text)
            logger.info(f"Feedback sent to channel: rating={rating}, category={category_name}")

        except Exception as e:
            logger.error(f"Failed to send feedback to channel: {e}")

    def _generate_feedback_response(self, category_name: str, rating: int, comment: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏"""
        stars = "‚≠ê" * rating

        if rating <= 2:
            response = f"""
üòî –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {"–î–æ–±–∞–≤–ª–µ–Ω" if comment else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω"}

–ú—ã –æ—á–µ–Ω—å —Å–æ–∂–∞–ª–µ–µ–º –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π.

üîß –ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–æ–±–ª–µ–º–µ.
üìû –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /start ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

üíô –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!
            """
        elif rating == 3:
            response = f"""
ü§î –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {"–î–æ–±–∞–≤–ª–µ–Ω" if comment else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω"}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!

üí° –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
            """
        else:  # rating >= 4
            response = f"""
üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {"–î–æ–±–∞–≤–ª–µ–Ω" if comment else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω"}

–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! 

üåü –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö!
            """

        return response
    # ================== –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò ==================

    async def show_social_networks(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
        await self._log_user_action(query.from_user.id, "social_networks")

        text = """
üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã
‚Ä¢ –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ –±–∏–ª–µ—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.social_networks())
        await query.answer()

    # ================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ==================

    async def handle_admin_actions(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if query.from_user.id not in config.ADMIN_IDS:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        action = query.data.replace("admin_", "")

        if action == "stats":
            await self._show_admin_stats(query)
        elif action == "tickets":
            await self._show_admin_tickets(query)
        elif action == "feedback":
            await self._show_admin_feedback(query)
        elif action == "schedule":
            await self._show_admin_schedule(query)
        elif action == "support_dashboard":
            await self._show_admin_support_dashboard(query)
        elif action == "urgent_tickets":
            await self._show_admin_urgent_tickets(query)
        elif action == "detailed_stats":
            await self._show_admin_detailed_stats(query)
        elif action == "staff_activity":
            await self._show_admin_staff_activity(query)
        elif action == "daily_metrics":
            await self._show_admin_daily_metrics(query)
        elif action == "open_tickets":
            await self._show_admin_open_tickets(query)

    async def _show_admin_support_dashboard(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        try:
            stats = await self.db.get_support_statistics()
            urgent_tickets = await self.db.get_tickets_requiring_attention()

            text = f"""
üéõ –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–î–ï–†–ñ–ö–û–ô

üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['tickets']['total']}
üîÑ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['tickets']['open']}
‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['tickets']['closed']}

üìÖ –ó–ê –°–ï–ì–û–î–ù–Ø:
‚Ä¢ –ù–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {stats['tickets']['today']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']['today']}

üìà –ó–ê –ù–ï–î–ï–õ–Æ:
‚Ä¢ –¢–∏–∫–µ—Ç–æ–≤: {stats['tickets']['this_week']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['messages']['from_users']}
‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['messages']['from_staff']}

‚è± –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {stats['response_time']['average_minutes']:.1f} –º–∏–Ω
‚Ä¢ –í —á–∞—Å–∞—Ö: {stats['response_time']['average_hours']:.1f} —á

üö® –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø: {len(urgent_tickets)} —Ç–∏–∫–µ—Ç–æ–≤
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö® –°—Ä–æ—á–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã",
                                      callback_data="admin_urgent_tickets")],
                [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                      callback_data="admin_detailed_stats")],
                [InlineKeyboardButton(text="üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                      callback_data="admin_staff_activity")],
                [InlineKeyboardButton(text="üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω—è–º",
                                      callback_data="admin_daily_metrics")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã",
                                      callback_data="admin_open_tickets")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_support_dashboard")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing admin support dashboard: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏", show_alert=True)

    async def _show_admin_urgent_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ä–æ—á–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è"""
        try:
            urgent_tickets = await self.db.get_tickets_requiring_attention()

            if not urgent_tickets:
                text = "‚úÖ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!"
            else:
                text = f"üö® –°–†–û–ß–ù–´–ï –¢–ò–ö–ï–¢–´ ({len(urgent_tickets)})\n\n"

                for ticket in urgent_tickets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    hours = int(ticket['hours_since_last_message'])
                    text += f"üî• #{ticket['id']} - {ticket['first_name']}\n"
                    text += f"‚è∞ –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: {hours} —á\n"
                    text += f"üìß {ticket['email']}\n"
                    text += f"üí¨ {ticket['message'][:60]}...\n\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_urgent_tickets")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã",
                                      callback_data="admin_open_tickets")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="admin_support_dashboard")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing urgent tickets: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ä–æ—á–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤", show_alert=True)

    async def _show_admin_detailed_stats(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.db.get_support_statistics()

            text = f"""
üìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò

üìã –¢–ò–ö–ï–¢–´:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –í—Å–µ–≥–æ: {stats['tickets']['total']}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['tickets']['open']}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {stats['tickets']['closed']}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['tickets']['today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['tickets']['this_week']}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['tickets']['this_month']}

üí¨ –°–û–û–ë–©–ï–ù–ò–Ø:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –í—Å–µ–≥–æ: {stats['messages']['total']}
‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['messages']['from_users']}
‚Ä¢ –û—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['messages']['from_staff']}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['messages']['today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['messages']['this_week']}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['messages']['this_month']}

‚è± –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {stats['response_time']['average_minutes']:.1f} –º–∏–Ω
‚Ä¢ –í —á–∞—Å–∞—Ö: {stats['response_time']['average_hours']:.1f} —á

üëë –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:
            """

            for i, user in enumerate(stats['top_users'][:5], 1):
                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                text += f"{i}. {user['first_name']} ({username}): {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                      callback_data="admin_staff_activity")],
                [InlineKeyboardButton(text="üìà –ü–æ –¥–Ω—è–º",
                                      callback_data="admin_daily_metrics")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_detailed_stats")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="admin_support_dashboard")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing detailed stats: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    async def _show_admin_staff_activity(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        try:
            stats = await self.db.get_support_statistics()

            text = "üë• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–û–í (–∑–∞ –Ω–µ–¥–µ–ª—é)\n\n"

            if not stats['staff_activity']:
                text += "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
            else:
                for i, staff in enumerate(stats['staff_activity'], 1):
                    role = "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if staff['is_admin'] else "üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
                    text += f"{i}. {role} (ID: {staff['user_id']})\n"
                    text += f"   üí¨ –û—Ç–≤–µ—Ç–æ–≤: {staff['message_count']}\n\n"

            text += f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['messages']['from_staff']}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['response_time']['average_minutes']:.1f} –º–∏–Ω\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                      callback_data="admin_detailed_stats")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_staff_activity")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="admin_support_dashboard")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing staff activity: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", show_alert=True)

    async def _show_admin_daily_metrics(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ—Ç—Ä–∏–∫ –ø–æ –¥–Ω—è–º"""
        try:
            stats = await self.db.get_support_statistics()

            text = "üìà –ú–ï–¢–†–ò–ö–ò –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è)\n\n"

            if not stats['daily_metrics']:
                text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
            else:
                for day in stats['daily_metrics']:
                    date_str = day['date'].strftime('%d.%m')
                    text += f"üìÖ {date_str}:\n"
                    text += f"   üÜï –°–æ–∑–¥–∞–Ω–æ: {day['tickets_created']}\n"
                    text += f"   ‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: {day['tickets_closed']}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            total_created = sum(day['tickets_created'] for day in stats['daily_metrics'])
            total_closed = sum(day['tickets_closed'] for day in stats['daily_metrics'])

            text += f"üìã –ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {total_created}\n"
            text += f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {total_closed}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {total_created/7:.1f}\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                      callback_data="admin_detailed_stats")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_daily_metrics")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="admin_support_dashboard")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing daily metrics: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫", show_alert=True)

    async def _show_admin_open_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
        try:
            tickets = await self.db.search_tickets(status="open", limit=20)

            if not tickets:
                text = "‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤!"
            else:
                text = f"üìã –û–¢–ö–†–´–¢–´–ï –¢–ò–ö–ï–¢–´ ({len(tickets)})\n\n"

                for ticket in tickets[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                    created_date = ticket['created_at'].strftime('%d.%m %H:%M')
                    text += f"üé´ #{ticket['id']} - {ticket['first_name']}\n"
                    text += f"üìß {ticket['email']}\n"
                    text += f"üìÖ {created_date}\n"
                    text += f"üí¨ {ticket['message'][:50]}...\n\n"

                if len(tickets) > 15:
                    text += f"... –∏ –µ—â–µ {len(tickets) - 15} —Ç–∏–∫–µ—Ç–æ–≤"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö® –°—Ä–æ—á–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã",
                                      callback_data="admin_urgent_tickets")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      callback_data="admin_open_tickets")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                      callback_data="admin_support_dashboard")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing open tickets: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤", show_alert=True)

    # –°—Ç–∞—Ä—ã–µ –∞–¥–º–∏–Ω –º–µ—Ç–æ–¥—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async def _show_admin_stats(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            stats = await self.db.get_usage_stats()
            feedback_stats = await self.db.get_feedback_stats()

            text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']}
üîÑ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}
üí≠ –û—Ç–∑—ã–≤–æ–≤: {feedback_stats['total']['total_feedback']}
‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats['total']['average_rating']:.1f}/5

üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
            """

            for action in stats['popular_actions'][:5]:
                text += f"‚Ä¢ {action['action']}: {action['count']}\n"

            text += f"\nüìà –û—Ç–∑—ã–≤—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"

            for category in feedback_stats['by_category'][:5]:
                text += f"‚Ä¢ {category['category']}: {category['avg_rating']:.1f}/5 ({category['count']} –æ—Ç–∑—ã–≤–æ–≤)\n"

            await query.message.edit_text(text, reply_markup=Keyboards.admin_menu())

        except Exception as e:
            logger.error(f"Error showing admin stats: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    async def _show_admin_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            tickets = await self.db.get_support_tickets("open")

            if not tickets:
                text = "üìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"
            else:
                text = f"üé´ –û–¢–ö–†–´–¢–´–ï –û–ë–†–ê–©–ï–ù–ò–Ø ({len(tickets)})\n\n"

                for ticket in tickets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    text += f"#{ticket['id']} - {ticket['first_name']}\n"
                    text += f"üìß {ticket['email']}\n"
                    text += f"üí¨ {ticket['message'][:50]}...\n"
                    text += f"‚è∞ {ticket['created_at'].strftime('%d.%m %H:%M')}\n\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tickets")],
                [InlineKeyboardButton(text="üéõ –ü–∞–Ω–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="admin_support_dashboard")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing admin tickets: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤", show_alert=True)

    async def _show_admin_feedback(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            feedback_stats = await self.db.get_feedback_stats()

            text = f"""
üí≠ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ó–´–í–û–í

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {feedback_stats['total']['total_feedback']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats['total']['average_rating']:.1f}/5
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {feedback_stats['total']['unique_users']}

üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
            """

            for category in feedback_stats['by_category']:
                text += f"‚Ä¢ {category['category']}: {category['avg_rating']:.1f}/5 ({category['count']})\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_feedback")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing admin feedback: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

    async def _show_admin_schedule(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        text = """
üìÖ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="admin_view_schedule")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="admin_add_schedule")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_unknown_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self._update_user_info(message)
        await self._log_user_action(message.from_user.id, "unknown_message", {"text": message.text})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        active_ticket = await self.db.get_user_active_ticket(message.from_user.id)
        has_active_ticket = active_ticket is not None

        text = """
‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
        """

        if has_active_ticket:
            text += f"\n\nüî¥ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{active_ticket['id']} –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

        await message.answer(text, reply_markup=Keyboards.main_menu_with_support_indicator(has_active_ticket))