"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
"""

import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

from config import config
from database import Database
from keyboards import Keyboards

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_message = State()
    waiting_for_continuation = State()

class FeedbackStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_rating = State()
    waiting_for_comment = State()

class AdminStates(StatesGroup):
    waiting_for_schedule_data = State()

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, database: Database, bot):
        self.db = database
        self.bot = bot
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(Command("menu"))(self.cmd_menu)
        self.router.message(Command("admin"))(self.cmd_admin)

        # Callback –∑–∞–ø—Ä–æ—Å—ã
        self.router.callback_query(F.data == "main_menu")(self.show_main_menu)
        self.router.callback_query(F.data == "schedule")(self.show_schedule)
        self.router.callback_query(F.data.startswith("schedule_day_"))(self.show_schedule_day)
        self.router.callback_query(F.data == "navigation")(self.show_navigation)
        self.router.callback_query(F.data == "map")(self.send_festival_map)
        self.router.callback_query(F.data.startswith("route_"))(self.show_location_map)
        self.router.callback_query(F.data == "tickets")(self.show_tickets)
        self.router.callback_query(F.data == "activities")(self.show_activities)
        self.router.callback_query(F.data == "workshops")(self.show_workshops)
        self.router.callback_query(F.data == "lectures")(self.show_lectures)
        self.router.callback_query(F.data == "support")(self.start_support)
        self.router.callback_query(F.data == "feedback")(self.start_feedback)
        self.router.callback_query(F.data.startswith("feedback_"))(self.select_feedback_category)
        self.router.callback_query(F.data.startswith("rating_"))(self.select_rating)
        self.router.callback_query(F.data == "skip_comment")(self.skip_feedback_comment)
        self.router.callback_query(F.data == "social")(self.show_social_networks)

        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        self.router.callback_query(F.data.startswith("admin_"))(self.handle_admin_actions)

        # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç—ã –≤ —Ç—Ä–µ–¥–∞—Ö)
        self.router.message(F.chat.id == int(config.SUPPORT_GROUP_ID) if config.SUPPORT_GROUP_ID else None)(self.handle_support_response)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.router.message(StateFilter(SupportStates.waiting_for_email))(self.process_support_email)
        self.router.message(StateFilter(SupportStates.waiting_for_message))(self.process_support_message)
        self.router.message(StateFilter(SupportStates.waiting_for_continuation))(self.process_support_continuation)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.router.message(StateFilter(FeedbackStates.waiting_for_comment))(self.process_feedback_comment)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message()(self.handle_unknown_message)

    async def _log_user_action(self, user_id: int, action: str, details: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.log_user_action(user_id, action, details)
        except Exception as e:
            logger.error(f"Failed to log user action: {e}")

    async def _update_user_info(self, message_or_query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = message_or_query.from_user
            await self.db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                language_code=user.language_code
            )
            await self.db.update_user_activity(user.id)
        except Exception as e:
            logger.error(f"Failed to update user info: {e}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await self._update_user_info(message)
            await self._log_user_action(message.from_user.id, "start_command")

            welcome_text = f"""
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –§–µ—Å—Ç–∏–≤–∞–ª—å!

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
‚Ä¢ üó∫ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ
‚Ä¢ üé´ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
‚Ä¢ üé® –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
‚Ä¢ üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
            """

            await message.answer(welcome_text, reply_markup=Keyboards.main_menu())

        except Exception as e:
            logger.error(f"Error in cmd_start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_menu(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await self.show_main_menu_message(message)

    async def cmd_admin(self, message: Message):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if message.from_user.id in config.ADMIN_IDS:
            await message.answer("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=Keyboards.admin_menu())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async def show_main_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (callback)"""
        await self._update_user_info(query)
        await self._log_user_action(query.from_user.id, "main_menu")

        await query.message.edit_text(
            "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=Keyboards.main_menu()
        )
        await query.answer()

    async def show_main_menu_message(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        await self._update_user_info(message)
        await self._log_user_action(message.from_user.id, "main_menu")

        await message.answer(
            "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=Keyboards.main_menu()
        )

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    async def show_schedule(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        await self._log_user_action(query.from_user.id, "schedule_menu")

        text = """
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–§–µ—Å—Ç–∏–≤–∞–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç 5 –¥–Ω–µ–π.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.schedule_days())
        await query.answer()

    async def show_schedule_day(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        day = int(query.data.split("_")[-1])
        await self._log_user_action(query.from_user.id, "schedule_day", {"day": day})

        try:
            schedule = await self.db.get_schedule_by_day(day)

            if schedule:
                text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –î–µ–Ω—å {day}\n\n"
                for item in schedule:
                    text += f"üïê {item['time'].strftime('%H:%M')} - {item['artist_name']}\n"
                    text += f"üé™ –°—Ü–µ–Ω–∞: {item['stage']}\n"
                    if item['description']:
                        text += f"üìù {item['description']}\n"
                    text += "\n"
            else:
                text = f"üìÖ –î–µ–Ω—å {day}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="schedule")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)
            await query.answer()

        except Exception as e:
            logger.error(f"Error showing schedule day {day}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    async def show_navigation(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        await self._log_user_action(query.from_user.id, "navigation_menu")

        text = """
üó∫ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
‚Ä¢ –û–±—â–∞—è –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        """

        await query.message.edit_text(text, reply_markup=Keyboards.navigation_menu())
        await query.answer()

    async def send_festival_map(self, query: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π –∫–∞—Ä—Ç—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"""
        await self._log_user_action(query.from_user.id, "festival_map")

        try:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
            route_url = config.get_yandex_route_url(config.FESTIVAL_COORDINATES)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            try:
                from aiogram.types import FSInputFile

                map_image = FSInputFile(config.MAPS_IMAGES["festival_map"])
                await query.message.answer_photo(
                    photo=map_image,
                    caption="üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                            "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                            "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä\n"
                            "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä\n"
                            "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ–∫\n"
                            "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥\n"
                            "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - –≤—Ö–æ–¥\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await query.message.edit_text(
                    "üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                    "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                    "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞\n"
                    "‚Ä¢ –¢—É–∞–ª–µ—Ç—ã - –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É\n"
                    "‚Ä¢ –ú–µ–¥–ø—É–Ω–∫—Ç - —Ä—è–¥–æ–º —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–æ–π\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error sending festival map: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã", show_alert=True)

        await query.answer()

    async def show_location_map(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        location = query.data.split("_", 1)[1]
        await self._log_user_action(query.from_user.id, "location_map", {"location": location})

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        locations_info = {
            "foodcourt": {
                "title": "üçï –§—É–¥–∫–æ—Ä—Ç",
                "description": "–ó–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏",
                "details": [
                    "üçï –ü–∏—Ü—Ü–∞ –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è",
                    "üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Ñ–∞—Å—Ç-—Ñ—É–¥",
                    "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                    "‚òï –ö–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏",
                    "üç∞ –î–µ—Å–µ—Ä—Ç—ã –∏ –≤—ã–ø–µ—á–∫–∞"
                ]
            },
            "workshops": {
                "title": "üé® –ó–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏",
                "details": [
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    "üé§ –í–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
                    "üíª –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
                    "‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω",
                    "üéß –ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–∞"
                ]
            },
            "souvenirs": {
                "title": "üõç –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã",
                "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∏",
                    "üß¢ –ö–µ–ø–∫–∏ –∏ –≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
                    "üìÄ –î–∏—Å–∫–∏ –∏ –≤–∏–Ω–∏–ª",
                    "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã"
                ]
            },
            "toilets": {
                "title": "üöª –¢—É–∞–ª–µ—Ç—ã",
                "description": "–°–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üöπ –ú—É–∂—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "üö∫ –ñ–µ–Ω—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "‚ôø –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                    "üë∂ –ü–µ–ª–µ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã",
                    "üßº –£–º—ã–≤–∞–ª—å–Ω–∏–∫–∏"
                ]
            },
            "medical": {
                "title": "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã",
                "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å",
                "details": [
                    "ü©∫ –í—Ä–∞—á–∏ –∏ –º–µ–¥—Å–µ—Å—Ç—Ä—ã",
                    "üíä –ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã",
                    "üöë –°–≤—è–∑—å —Å —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â—å—é",
                    "üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: 112",
                    "‚öïÔ∏è –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"
                ]
            }
        }

        location_info = locations_info.get(location)
        if not location_info:
            await query.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
            coords = config.LOCATIONS_COORDINATES.get(location, config.FESTIVAL_COORDINATES)
            route_url = config.get_yandex_route_url(coords)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            details_text = "\n".join([f"‚Ä¢ {detail}" for detail in location_info["details"]])
            caption_text = f"**{location_info['title']}**\n\n" \
                           f"{location_info['description']}\n\n" \
                           f"üìã **–ß—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å:**\n{details_text}\n\n" \
                           f"–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                from aiogram.types import FSInputFile

                map_image_path = config.MAPS_IMAGES.get(location)
                if map_image_path:
                    map_image = FSInputFile(map_image_path)
                    await query.message.answer_photo(
                        photo=map_image,
                        caption=caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await query.message.edit_text(
                        caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await query.message.edit_text(
                    caption_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error showing location map for {location}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏", show_alert=True)

        await query.answer()

    # –ë–∏–ª–µ—Ç—ã
    async def show_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö"""
        await self._log_user_action(query.from_user.id, "tickets_menu")

        text = """
üé´ –ë–∏–ª–µ—Ç—ã –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å

–î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤:
‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç (1 –¥–µ–Ω—å)
‚Ä¢ –°–µ–º–µ–π–Ω—ã–π –±–∏–ª–µ—Ç (5 —á–µ–ª–æ–≤–µ–∫)  
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã (2, 3, 5 –¥–Ω–µ–π)

üí° –í—Å–µ –±–∏–ª–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞–º
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–æ–Ω–∞–º –æ—Ç–¥—ã—Ö–∞

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
        """

        await query.message.edit_text(text, reply_markup=Keyboards.tickets_menu())
        await query.answer()

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    async def show_activities(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        await self._log_user_action(query.from_user.id, "activities_menu")

        text = """
üé® –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–ù–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

üé® **–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤–æ—Ä–∫—à–æ–ø—ã
üéì **–õ–µ–∫—Ç–æ—Ä–∏–π** - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ–∫—Ü–∏–∏ –∏ —Å–µ–º–∏–Ω–∞—Ä—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.activities_menu())
        await query.answer()

    async def show_workshops(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö"""
        await self._log_user_action(query.from_user.id, "workshops_info")

        text = """
üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ 12:00-13:30 - "–û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
‚Ä¢ 14:00-15:30 - "–°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
‚Ä¢ 16:00-17:30 - "–í–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
‚Ä¢ 18:00-19:30 - "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω"

üìç –õ–æ–∫–∞—Ü–∏—è: –ë–µ–ª—ã–µ —à–∞—Ç—Ä—ã (–∑–∞–ø–∞–¥–Ω–∞—è –∑–æ–Ω–∞)

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –¥–æ 20 —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ
üé´ –°—Ç–æ–∏–º–æ—Å—Ç—å: –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–∏–ª–µ—Ç
üìù –ó–∞–ø–∏—Å—å: —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤ —à–∞—Ç—Ä–µ

üéÅ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç:
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚Ä¢ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ó–∞–ø–∏—Å—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="workshop_register")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º", callback_data="activities")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    async def show_lectures(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–∫—Ç–æ—Ä–∏–∏"""
        await self._log_user_action(query.from_user.id, "lectures_info")

        text = """
üéì –õ–µ–∫—Ç–æ—Ä–∏–π

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:
‚Ä¢ 10:00-11:00 - "–ò—Å—Ç–æ—Ä–∏—è –¥–∂–∞–∑–∞: –æ—Ç –∏—Å—Ç–æ–∫–æ–≤ –¥–æ –Ω–∞—à–∏—Ö –¥–Ω–µ–π"
‚Ä¢ 11:30-12:30 - "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è —Å–µ–≥–æ–¥–Ω—è"
‚Ä¢ 13:00-14:00 - "–ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ –≤ –º—É–∑—ã–∫–µ"
‚Ä¢ 15:00-16:00 - "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"
‚Ä¢ 16:30-17:30 - "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–Ω—Ç–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —ç–ø–æ—Ö—É"

üìç –õ–æ–∫–∞—Ü–∏—è: –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ª (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: –¥–æ 100 —á–µ–ª–æ–≤–µ–∫
üé´ –°—Ç–æ–∏–º–æ—Å—Ç—å: –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–∏–ª–µ—Ç
üìù –ó–∞–ø–∏—Å—å: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥

üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –ª–µ–∫—Ü–∏–π
‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ Networking —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏

üí° –õ–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–µ–∫—Ü–∏–π", callback_data="lectures_schedule")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º", callback_data="activities")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    async def start_support(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        await self._log_user_action(query.from_user.id, "support_start")

        text = """
üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–æ:
1. –í–∞—à email –¥–ª—è —Å–≤—è–∑–∏
2. –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.back_to_main())
        await state.set_state(SupportStates.waiting_for_email)
        await query.answer()

    async def process_support_email(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        email = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email or "." not in email:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n–ü—Ä–∏–º–µ—Ä: your@email.com",
                reply_markup=Keyboards.back_to_main()
            )
            return

        await state.update_data(email=email)
        await message.answer(
            f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
            reply_markup=Keyboards.back_to_main()
        )
        await state.set_state(SupportStates.waiting_for_message)

    async def process_support_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            data = await state.get_data()
            email = data.get("email")

            message_text = message.text or message.caption or ""
            photo_file_id = None

            if message.photo:
                photo_file_id = message.photo[-1].file_id

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –ë–î (—Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ thread_id)
            ticket_id = await self.db.create_support_ticket(
                user_id=message.from_user.id,
                email=email,
                message=message_text,
                photo_file_id=photo_file_id
            )

            await self._log_user_action(message.from_user.id, "support_ticket_created",
                                        {"ticket_id": ticket_id})

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–µ–¥–∞
            thread_id, initial_message_id = await self._send_to_support_group(
                ticket_id, message, email, message_text, photo_file_id
            )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–¥–µ
            if thread_id and initial_message_id:
                await self.db.update_ticket_thread_info(ticket_id, thread_id, initial_message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                "‚è± –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.\n"
                "üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç –æ—Ç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                "üîî –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç!\n\n"
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                          callback_data=f"continue_ticket_{ticket_id}")],
                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="main_menu")]
                ])
            )

            await state.clear()

        except Exception as e:
            logger.error(f"Error processing support message: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_to_main()
            )
            await state.clear()

    async def _send_to_support_group(self, ticket_id: int, message: Message,
                                     email: str, message_text: str, photo_file_id: str = None) -> tuple:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–µ–¥–∞"""
        if not config.SUPPORT_GROUP_ID:
            return None, None

        try:
            user = message.from_user
            support_text = f"""
üÜò –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï #{ticket_id}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''}
üìß Email: {email}
üÜî User ID: {user.id}
üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìù –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ - –æ—Ç–≤–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–π–¥—É—Ç –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ!

‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏" (–∞–Ω–æ–Ω–∏–º–Ω–æ)
üë• –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            """

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
            if photo_file_id:
                sent_message = await self.bot.send_photo(
                    config.SUPPORT_GROUP_ID,
                    photo_file_id,
                    caption=support_text
                )
            else:
                sent_message = await self.bot.send_message(
                    config.SUPPORT_GROUP_ID,
                    support_text
                )

            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ø–∏–∫–∏, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
            thread_id = None
            if config.SUPPORT_GROUP_TOPICS:
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ (—Ñ–æ—Ä—É–º-—Ç–æ–ø–∏–∫–∞)
                    forum_topic = await self.bot.create_forum_topic(
                        chat_id=config.SUPPORT_GROUP_ID,
                        name=f"–¢–∏–∫–µ—Ç #{ticket_id} - {user.first_name}",
                        icon_color=0xF44336  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
                    )
                    thread_id = forum_topic.message_thread_id

                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç—Ä–µ–¥
                    if photo_file_id:
                        thread_message = await self.bot.send_photo(
                            config.SUPPORT_GROUP_ID,
                            photo_file_id,
                            caption=support_text,
                            message_thread_id=thread_id
                        )
                    else:
                        thread_message = await self.bot.send_message(
                            config.SUPPORT_GROUP_ID,
                            support_text,
                            message_thread_id=thread_id
                        )

                    return thread_id, thread_message.message_id

                except Exception as e:
                    logger.error(f"Failed to create forum topic: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return None, sent_message.message_id

            return None, sent_message.message_id

        except Exception as e:
            logger.error(f"Failed to send to support group: {e}")
            return None, None

    async def handle_support_response(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥–µ
        if not message.message_thread_id:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        is_admin = user_id in config.ADMIN_IDS
        is_support_staff = user_id in config.SUPPORT_STAFF_IDS

        if not (is_admin or is_support_staff):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –ø–æ thread_id
            ticket = await self.db.get_ticket_by_thread(message.message_thread_id)

            if not ticket:
                logger.warning(f"Ticket not found for thread_id: {message.message_thread_id}")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if is_admin:
                sender_role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ü–æ–¥–¥–µ—Ä–∂–∫–∏"
                role_emoji = "üë®‚Äçüíº"
            else:
                sender_role = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∏"
                role_emoji = "üßë‚Äçüíº"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏
            await self.db.add_support_response(
                ticket_id=ticket['id'],
                staff_user_id=user_id,
                response_text=message.text or message.caption or "",
                is_admin=is_admin
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
            response_text = f"""
üÜò –û—Ç–≤–µ—Ç –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket['id']}

{role_emoji} –û—Ç: {sender_role}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ –û—Ç–≤–µ—Ç:
{message.text or message.caption or ""}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ùì –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω, –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º —á–µ—Ä–µ–∑: /start ‚Üí üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

üí° –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ: /start ‚Üí üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç
            try:
                if message.photo:
                    await self.bot.send_photo(
                        ticket['user_id'],
                        message.photo[-1].file_id,
                        caption=response_text
                    )
                elif message.document:
                    await self.bot.send_document(
                        ticket['user_id'],
                        message.document.file_id,
                        caption=response_text
                    )
                elif message.video:
                    await self.bot.send_video(
                        ticket['user_id'],
                        message.video.file_id,
                        caption=response_text
                    )
                else:
                    await self.bot.send_message(
                        ticket['user_id'],
                        response_text
                    )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ)
                real_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await message.reply(
                    f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket['first_name']} (ID: {ticket['user_id']})\n"
                    f"üìù –û—Ç: {real_name} ({sender_role})\n"
                    f"üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç \"{sender_role}\""
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏
                await self._log_user_action(
                    user_id,
                    "support_response_sent",
                    {
                        "ticket_id": ticket['id'],
                        "user_id": ticket['user_id'],
                        "is_admin": is_admin,
                        "role": sender_role
                    }
                )

            except Exception as e:
                logger.error(f"Failed to send response to user {ticket['user_id']}: {e}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–¥–µ
                error_message = f"""
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket['first_name']} {ticket['last_name'] or ''}
üÜî User ID: {ticket['user_id']}
üìß Email: {ticket['email']}
‚ùå –û—à–∏–±–∫–∞: {str(e)}

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

üìß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ email: {ticket['email']}
                """

                await message.reply(error_message)

        except Exception as e:
            logger.error(f"Error handling support response: {e}")
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞\n"
                f"üìù –î–µ—Ç–∞–ª–∏: {str(e)}"
            )

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    async def start_feedback(self, query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        await self._log_user_action(query.from_user.id, "feedback_start")

        text = """
üí≠ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.feedback_categories())
        await state.set_state(FeedbackStates.waiting_for_category)
        await query.answer()

    async def select_feedback_category(self, query: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        category = query.data.replace("feedback_", "")

        categories = {
            "festival": "–§–µ—Å—Ç–∏–≤–∞–ª—å –≤ —Ü–µ–ª–æ–º",
            "food": "–§—É–¥–∫–æ—Ä—Ç—ã",
            "workshops": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã",
            "lectures": "–õ–µ–∫—Ç–æ—Ä–∏–π",
            "infrastructure": "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
        }

        category_name = categories.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

        await state.update_data(category=category, category_name=category_name)

        text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}

–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.rating_keyboard())
        await state.set_state(FeedbackStates.waiting_for_rating)
        await query.answer()

    async def select_rating(self, query: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏"""
        rating = int(query.data.replace("rating_", ""))

        data = await state.get_data()
        category_name = data.get("category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

        await state.update_data(rating=rating)

        stars = "‚≠ê" * rating
        text = f"""
üí≠ –û—Ü–µ–Ω–∫–∞: {category_name}
üåü –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                  callback_data="skip_comment")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(FeedbackStates.waiting_for_comment)
        await query.answer()

    async def process_feedback_comment(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
        await self._save_feedback(message, state, message.text)

    async def skip_feedback_comment(self, query: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
        await self._save_feedback(query, state, None)

    async def _save_feedback(self, message_or_query, state: FSMContext, comment: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
        try:
            data = await state.get_data()
            category = data.get("category")
            category_name = data.get("category_name")
            rating = data.get("rating")
            user_id = message_or_query.from_user.id

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            await self.db.add_feedback(user_id, category, rating, comment)

            await self._log_user_action(user_id, "feedback_submitted", {
                "category": category,
                "rating": rating,
                "has_comment": bool(comment)
            })

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤
            if config.FEEDBACK_CHANNEL_ID:
                stars = "‚≠ê" * rating
                feedback_text = f"""
üí≠ –ù–û–í–´–ô –û–¢–ó–´–í

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)
üë§ –û—Ç: {message_or_query.from_user.first_name}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
{comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """

                try:
                    await self.bot.send_message(config.FEEDBACK_CHANNEL_ID, feedback_text)
                except Exception as e:
                    logger.error(f"Failed to send feedback to channel: {e}")

            success_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}
üåü –û—Ü–µ–Ω–∫–∞: {"‚≠ê" * rating} ({rating}/5)
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {"–î–æ–±–∞–≤–ª–µ–Ω" if comment else "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω"}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üôè
            """

            if hasattr(message_or_query, 'answer'):
                await message_or_query.answer(success_text, reply_markup=Keyboards.back_to_main())
            else:
                await message_or_query.message.edit_text(success_text,
                                                         reply_markup=Keyboards.back_to_main())

            await state.clear()

        except Exception as e:
            logger.error(f"Error saving feedback: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            if hasattr(message_or_query, 'answer'):
                await message_or_query.answer(error_text, reply_markup=Keyboards.back_to_main())
            else:
                await message_or_query.message.edit_text(error_text,
                                                         reply_markup=Keyboards.back_to_main())
            await state.clear()

    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    async def show_social_networks(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
        await self._log_user_action(query.from_user.id, "social_networks")

        text = """
üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã
‚Ä¢ –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ –±–∏–ª–µ—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.social_networks())
        await query.answer()

    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    async def handle_admin_actions(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if query.from_user.id not in config.ADMIN_IDS:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        action = query.data.replace("admin_", "")

        if action == "stats":
            await self._show_admin_stats(query)
        elif action == "tickets":
            await self._show_admin_tickets(query)
        elif action == "feedback":
            await self._show_admin_feedback(query)
        elif action == "schedule":
            await self._show_admin_schedule(query)

    async def _show_admin_stats(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            stats = await self.db.get_usage_stats()
            feedback_stats = await self.db.get_feedback_stats()

            text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']}
üîÑ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}
üí≠ –û—Ç–∑—ã–≤–æ–≤: {feedback_stats['total']['total_feedback']}
‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats['total']['average_rating']:.1f}/5

üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
            """

            for action in stats['popular_actions'][:5]:
                text += f"‚Ä¢ {action['action']}: {action['count']}\n"

            text += f"\nüìà –û—Ç–∑—ã–≤—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"

            for category in feedback_stats['by_category'][:5]:
                text += f"‚Ä¢ {category['category']}: {category['avg_rating']:.1f}/5 ({category['count']} –æ—Ç–∑—ã–≤–æ–≤)\n"

            await query.message.edit_text(text, reply_markup=Keyboards.admin_menu())

        except Exception as e:
            logger.error(f"Error showing admin stats: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    async def _show_admin_tickets(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            tickets = await self.db.get_support_tickets("open")

            if not tickets:
                text = "üìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"
            else:
                text = f"üé´ –û–¢–ö–†–´–¢–´–ï –û–ë–†–ê–©–ï–ù–ò–Ø ({len(tickets)})\n\n"

                for ticket in tickets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    text += f"#{ticket['id']} - {ticket['first_name']}\n"
                    text += f"üìß {ticket['email']}\n"
                    text += f"üí¨ {ticket['message'][:50]}...\n"
                    text += f"‚è∞ {ticket['created_at'].strftime('%d.%m %H:%M')}\n\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tickets")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing admin tickets: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤", show_alert=True)

    async def _show_admin_feedback(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            feedback_stats = await self.db.get_feedback_stats()

            text = f"""
üí≠ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ó–´–í–û–í

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {feedback_stats['total']['total_feedback']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {feedback_stats['total']['average_rating']:.1f}/5
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {feedback_stats['total']['unique_users']}

üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
            """

            for category in feedback_stats['by_category']:
                text += f"‚Ä¢ {category['category']}: {category['avg_rating']:.1f}/5 ({category['count']})\n"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_feedback")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error showing admin feedback: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

    async def _show_admin_schedule(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        text = """
üìÖ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="admin_view_schedule")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="admin_add_schedule")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])

        await query.message.edit_text(text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_unknown_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self._update_user_info(message)
        await self._log_user_action(message.from_user.id, "unknown_message", {"text": message.text})

        text = """
‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
        """

        await message.answer(text, reply_markup=Keyboards.main_menu())