"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞ (–ß–∞—Å—Ç—å 1)
"""

import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError

from config import config
from database import Database
from keyboards import Keyboards

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_message = State()
    waiting_for_continuation = State()

class FeedbackStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_rating = State()
    waiting_for_comment = State()

class AdminStates(StatesGroup):
    waiting_for_schedule_data = State()

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, database: Database, bot):
        self.db = database
        self.bot = bot
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(Command("menu"))(self.cmd_menu)
        self.router.message(Command("admin"))(self.cmd_admin)

        # Callback –∑–∞–ø—Ä–æ—Å—ã
        self.router.callback_query(F.data == "main_menu")(self.show_main_menu)
        self.router.callback_query(F.data == "schedule")(self.show_schedule)
        self.router.callback_query(F.data.startswith("schedule_day_"))(self.show_schedule_day)
        self.router.callback_query(F.data == "navigation")(self.show_navigation)
        self.router.callback_query(F.data == "map")(self.send_festival_map)
        self.router.callback_query(F.data.startswith("route_"))(self.show_location_map)
        self.router.callback_query(F.data == "tickets")(self.show_tickets)
        self.router.callback_query(F.data == "activities")(self.show_activities)
        self.router.callback_query(F.data == "workshops")(self.show_workshops)
        self.router.callback_query(F.data == "lectures")(self.show_lectures)
        self.router.callback_query(F.data == "support")(self.start_support)
        self.router.callback_query(F.data == "feedback")(self.start_feedback)
        self.router.callback_query(F.data.startswith("feedback_"))(self.select_feedback_category)
        self.router.callback_query(F.data.startswith("rating_"))(self.select_rating)
        self.router.callback_query(F.data == "social")(self.show_social_networks)

        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        self.router.callback_query(F.data.startswith("admin_"))(self.handle_admin_actions)

        # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç—ã –≤ —Ç—Ä–µ–¥–∞—Ö)
        self.router.message(F.chat.id == int(config.SUPPORT_GROUP_ID) if config.SUPPORT_GROUP_ID else None)(self.handle_support_response)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.router.message(StateFilter(SupportStates.waiting_for_email))(self.process_support_email)
        self.router.message(StateFilter(SupportStates.waiting_for_message))(self.process_support_message)
        self.router.message(StateFilter(SupportStates.waiting_for_continuation))(self.process_support_continuation)

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.router.message(StateFilter(FeedbackStates.waiting_for_comment))(self.process_feedback_comment)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message()(self.handle_unknown_message)

    async def _log_user_action(self, user_id: int, action: str, details: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.log_user_action(user_id, action, details)
        except Exception as e:
            logger.error(f"Failed to log user action: {e}")

    async def _update_user_info(self, message_or_query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = message_or_query.from_user
            await self.db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                language_code=user.language_code
            )
            await self.db.update_user_activity(user.id)
        except Exception as e:
            logger.error(f"Failed to update user info: {e}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await self._update_user_info(message)
            await self._log_user_action(message.from_user.id, "start_command")

            welcome_text = f"""
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –§–µ—Å—Ç–∏–≤–∞–ª—å!

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π
‚Ä¢ üó∫ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ
‚Ä¢ üé´ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
‚Ä¢ üé® –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
‚Ä¢ üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Ä¢ üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
            """

            await message.answer(welcome_text, reply_markup=Keyboards.main_menu())

        except Exception as e:
            logger.error(f"Error in cmd_start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_menu(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await self.show_main_menu_message(message)

    async def cmd_admin(self, message: Message):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if message.from_user.id in config.ADMIN_IDS:
            await message.answer("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=Keyboards.admin_menu())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    async def show_main_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (callback)"""
        await self._update_user_info(query)
        await self._log_user_action(query.from_user.id, "main_menu")

        await query.message.edit_text(
            "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=Keyboards.main_menu()
        )
        await query.answer()

    async def show_main_menu_message(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        await self._update_user_info(message)
        await self._log_user_action(message.from_user.id, "main_menu")

        await message.answer(
            "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=Keyboards.main_menu()
        )

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    async def show_schedule(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        await self._log_user_action(query.from_user.id, "schedule_menu")

        text = """
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

–§–µ—Å—Ç–∏–≤–∞–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç 5 –¥–Ω–µ–π.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
        """

        await query.message.edit_text(text, reply_markup=Keyboards.schedule_days())
        await query.answer()

    async def show_schedule_day(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        day = int(query.data.split("_")[-1])
        await self._log_user_action(query.from_user.id, "schedule_day", {"day": day})

        try:
            schedule = await self.db.get_schedule_by_day(day)

            if schedule:
                text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –î–µ–Ω—å {day}\n\n"
                for item in schedule:
                    text += f"üïê {item['time'].strftime('%H:%M')} - {item['artist_name']}\n"
                    text += f"üé™ –°—Ü–µ–Ω–∞: {item['stage']}\n"
                    if item['description']:
                        text += f"üìù {item['description']}\n"
                    text += "\n"
            else:
                text = f"üìÖ –î–µ–Ω—å {day}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="schedule")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await query.message.edit_text(text, reply_markup=keyboard)
            await query.answer()

        except Exception as e:
            logger.error(f"Error showing schedule day {day}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    async def show_navigation(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        await self._log_user_action(query.from_user.id, "navigation_menu")

        text = """
üó∫ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
‚Ä¢ –û–±—â–∞—è –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        """

        await query.message.edit_text(text, reply_markup=Keyboards.navigation_menu())
        await query.answer()

    async def send_festival_map(self, query: CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π –∫–∞—Ä—Ç—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"""
        await self._log_user_action(query.from_user.id, "festival_map")

        try:
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
            route_url = config.get_yandex_route_url(config.FESTIVAL_COORDINATES)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            try:
                from aiogram.types import FSInputFile

                map_image = FSInputFile(config.MAPS_IMAGES["festival_map"])
                await query.message.answer_photo(
                    photo=map_image,
                    caption="üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                            "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                            "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä\n"
                            "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä\n"
                            "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ–∫\n"
                            "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥\n"
                            "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - –≤—Ö–æ–¥\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await query.message.edit_text(
                    "üó∫ **–ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è**\n\n"
                    "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
                    "‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ - —Ü–µ–Ω—Ç—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞ - —Å–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –§—É–¥–∫–æ—Ä—Ç - –≤–æ—Å—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã - –∑–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å\n"
                    "‚Ä¢ –°—É–≤–µ–Ω–∏—Ä—ã - —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞\n"
                    "‚Ä¢ –¢—É–∞–ª–µ—Ç—ã - –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É\n"
                    "‚Ä¢ –ú–µ–¥–ø—É–Ω–∫—Ç - —Ä—è–¥–æ–º —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–æ–π\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error sending festival map: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã", show_alert=True)

        await query.answer()

    async def show_location_map(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        location = query.data.split("_", 1)[1]
        await self._log_user_action(query.from_user.id, "location_map", {"location": location})

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö
        locations_info = {
            "foodcourt": {
                "title": "üçï –§—É–¥–∫–æ—Ä—Ç",
                "description": "–ó–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏",
                "details": [
                    "üçï –ü–∏—Ü—Ü–∞ –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è",
                    "üçî –ë—É—Ä–≥–µ—Ä—ã –∏ —Ñ–∞—Å—Ç-—Ñ—É–¥",
                    "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                    "‚òï –ö–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏",
                    "üç∞ –î–µ—Å–µ—Ä—Ç—ã –∏ –≤—ã–ø–µ—á–∫–∞"
                ]
            },
            "workshops": {
                "title": "üé® –ó–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                "description": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏",
                "details": [
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    "üé§ –í–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
                    "üíª –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
                    "‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–µ–Ω",
                    "üéß –ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–∞"
                ]
            },
            "souvenirs": {
                "title": "üõç –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã",
                "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∏",
                    "üß¢ –ö–µ–ø–∫–∏ –∏ –≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
                    "üé∏ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
                    "üìÄ –î–∏—Å–∫–∏ –∏ –≤–∏–Ω–∏–ª",
                    "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã"
                ]
            },
            "toilets": {
                "title": "üöª –¢—É–∞–ª–µ—Ç—ã",
                "description": "–°–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "details": [
                    "üöπ –ú—É–∂—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "üö∫ –ñ–µ–Ω—Å–∫–∏–µ —Ç—É–∞–ª–µ—Ç—ã",
                    "‚ôø –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
                    "üë∂ –ü–µ–ª–µ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã",
                    "üßº –£–º—ã–≤–∞–ª—å–Ω–∏–∫–∏"
                ]
            },
            "medical": {
                "title": "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã",
                "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å",
                "details": [
                    "ü©∫ –í—Ä–∞—á–∏ –∏ –º–µ–¥—Å–µ—Å—Ç—Ä—ã",
                    "üíä –ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã",
                    "üöë –°–≤—è–∑—å —Å —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â—å—é",
                    "üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: 112",
                    "‚öïÔ∏è –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"
                ]
            }
        }

        location_info = locations_info.get(location)
        if not location_info:
            await query.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
            coords = config.LOCATIONS_COORDINATES.get(location, config.FESTIVAL_COORDINATES)
            route_url = config.get_yandex_route_url(coords)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            details_text = "\n".join([f"‚Ä¢ {detail}" for detail in location_info["details"]])
            caption_text = f"**{location_info['title']}**\n\n" \
                           f"{location_info['description']}\n\n" \
                           f"üìã **–ß—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å:**\n{details_text}\n\n" \
                           f"–ù–∞–∂–º–∏—Ç–µ \"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", url=route_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="navigation")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                from aiogram.types import FSInputFile

                map_image_path = config.MAPS_IMAGES.get(location)
                if map_image_path:
                    map_image = FSInputFile(map_image_path)
                    await query.message.answer_photo(
                        photo=map_image,
                        caption=caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await query.message.edit_text(
                        caption_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )

            except FileNotFoundError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await query.message.edit_text(
                    caption_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"Error showing location map for {location}: {e}")
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏", show_alert=True)

        await query.answer()