#!/bin/bash
set -e

echo "üöÄ Starting Festival Bot..."
echo "üìÖ Date: $(date)"
echo "üåç Environment: ${ENVIRONMENT:-production}"
echo "üîç Debug: ${DEBUG:-false}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local host=$1
    local port=$2
    local service_name=$3

    echo "‚è≥ Waiting for $service_name to be ready..."
    while ! nc -z "$host" "$port"; do
        echo "‚è≥ $service_name is not ready yet. Waiting..."
        sleep 2
    done
    echo "‚úÖ $service_name is ready!"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
wait_for_service "${DB_HOST:-postgres}" "${DB_PORT:-5432}" "PostgreSQL"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
if [ -n "${REDIS_HOST}" ]; then
    wait_for_service "${REDIS_HOST}" "${REDIS_PORT:-6379}" "Redis"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_required_env() {
    local var_name=$1
    if [ -z "${!var_name}" ]; then
        echo "‚ùå Error: Required environment variable $var_name is not set"
        exit 1
    fi
}

echo "üîç Checking required environment variables..."
check_required_env "BOT_TOKEN"
check_required_env "ADMIN_IDS"
check_required_env "DB_PASSWORD"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üîç Testing database connection..."
python << 'PYTHON_SCRIPT'
import asyncio
import asyncpg
import os
import sys

async def test_db():
    try:
        conn = await asyncpg.connect(
            host=os.getenv('DB_HOST', 'postgres'),
            port=int(os.getenv('DB_PORT', 5432)),
            user=os.getenv('DB_USER', 'festival_user'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME', 'festival_bot'),
            timeout=10
        )
        await conn.fetchval('SELECT 1')
        await conn.close()
        print("‚úÖ Database connection successful")
        return True
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

if not asyncio.run(test_db()):
    sys.exit(1)
PYTHON_SCRIPT

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ Creating directories..."
mkdir -p /app/logs /app/backups

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
echo "üîí Setting permissions..."
chmod 755 /app/logs /app/backups

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "‚öôÔ∏è Validating configuration..."
cd /app/src
python -c "
import sys
sys.path.insert(0, '/app/src')
try:
    from config import config
    if config.validate_config():
        print('‚úÖ Configuration is valid')
    else:
        print('‚ùå Configuration validation failed')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå Configuration error: {e}')
    sys.exit(1)
"

echo "üéâ Initialization completed successfully!"
echo "‚ñ∂Ô∏è Starting bot with command: $@"

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
exec "$@"