#!/bin/bash
# ===========================================
# –°–ö–†–ò–ü–¢–´ –î–õ–Ø DOCKER –£–ü–†–ê–í–õ–ï–ù–ò–Ø
# ===========================================
cat > scripts/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "üöÄ Starting Festival Bot..."
echo "üìÖ Date: $(date)"
echo "üåç Environment: ${ENVIRONMENT:-production}"
echo "üîç Debug: ${DEBUG:-false}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local host=$1
    local port=$2
    local service_name=$3

    echo "‚è≥ Waiting for $service_name to be ready..."
    while ! nc -z "$host" "$port"; do
        echo "‚è≥ $service_name is not ready yet. Waiting..."
        sleep 2
    done
    echo "‚úÖ $service_name is ready!"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
wait_for_service "${DB_HOST:-postgres}" "${DB_PORT:-5432}" "PostgreSQL"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
if [ -n "${REDIS_HOST}" ]; then
    wait_for_service "${REDIS_HOST}" "${REDIS_PORT:-6379}" "Redis"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_required_env() {
    local var_name=$1
    if [ -z "${!var_name}" ]; then
        echo "‚ùå Error: Required environment variable $var_name is not set"
        exit 1
    fi
}

echo "üîç Checking required environment variables..."
check_required_env "BOT_TOKEN"
check_required_env "ADMIN_IDS"
check_required_env "DB_PASSWORD"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üîç Testing database connection..."
python << 'PYTHON_SCRIPT'
import asyncio
import asyncpg
import os
import sys

async def test_db():
    try:
        conn = await asyncpg.connect(
            host=os.getenv('DB_HOST', 'postgres'),
            port=int(os.getenv('DB_PORT', 5432)),
            user=os.getenv('DB_USER', 'festival_user'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME', 'festival_bot'),
            timeout=10
        )
        await conn.fetchval('SELECT 1')
        await conn.close()
        print("‚úÖ Database connection successful")
        return True
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

if not asyncio.run(test_db()):
    sys.exit(1)
PYTHON_SCRIPT

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ Creating directories..."
mkdir -p /app/logs /app/backups

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
echo "üîí Setting permissions..."
chmod 755 /app/logs /app/backups
chmod 644 /app/src/*.py

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "‚öôÔ∏è Validating configuration..."
cd /app/src
python -c "
import sys
sys.path.insert(0, '/app/src')
try:
    from config import config
    if config.validate_config():
        print('‚úÖ Configuration is valid')
    else:
        print('‚ùå Configuration validation failed')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå Configuration error: {e}')
    sys.exit(1)
"

echo "üéâ Initialization completed successfully!"
echo "‚ñ∂Ô∏è Starting bot with command: $@"

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
exec "$@"
EOF

# scripts/backup.sh - –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
cat > scripts/backup.sh << 'EOF'
#!/bin/bash
set -e

echo "üì¶ Starting backup process..."

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
BACKUP_DIR="/app/backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üíæ Creating database backup..."
PGPASSWORD="${DB_PASSWORD}" pg_dump \
    -h "${DB_HOST:-postgres}" \
    -p "${DB_PORT:-5432}" \
    -U "${DB_USER:-festival_user}" \
    -d "${DB_NAME:-festival_bot}" \
    --clean --if-exists --no-owner --no-privileges \
    > "$BACKUP_DIR/database.sql"

# –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "‚öôÔ∏è Backing up configuration..."
cp -r /app/config "$BACKUP_DIR/" 2>/dev/null || true

# –ë—ç–∫–∞–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
echo "üñºÔ∏è Backing up images..."
cp -r /app/images "$BACKUP_DIR/" 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
echo "üóúÔ∏è Creating archive..."
cd /app/backups
tar -czf "backup_$(date +%Y%m%d_%H%M%S).tar.gz" "$(basename "$BACKUP_DIR")"
rm -rf "$BACKUP_DIR"

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
echo "üßπ Cleaning old backups..."
ls -t backup_*.tar.gz | tail -n +8 | xargs rm -f

echo "‚úÖ Backup completed successfully!"
EOF

# scripts/restore.sh - –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
cat > scripts/restore.sh << 'EOF'
#!/bin/bash
set -e

if [ -z "$1" ]; then
    echo "‚ùå Usage: $0 <backup_file.tar.gz>"
    exit 1
fi

BACKUP_FILE="$1"
if [ ! -f "$BACKUP_FILE" ]; then
    echo "‚ùå Backup file not found: $BACKUP_FILE"
    exit 1
fi

echo "üîÑ Starting restore process from: $BACKUP_FILE"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
TEMP_DIR="/tmp/restore_$(date +%s)"
mkdir -p "$TEMP_DIR"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
echo "üì¶ Extracting backup..."
tar -xzf "$BACKUP_FILE" -C "$TEMP_DIR"

# –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±—ç–∫–∞–ø–æ–º
BACKUP_DIR=$(find "$TEMP_DIR" -type d -name "backup_*" | head -1)
if [ -z "$BACKUP_DIR" ]; then
    echo "‚ùå Invalid backup archive structure"
    rm -rf "$TEMP_DIR"
    exit 1
fi

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if [ -f "$BACKUP_DIR/database.sql" ]; then
    echo "üíæ Restoring database..."
    PGPASSWORD="${DB_PASSWORD}" psql \
        -h "${DB_HOST:-postgres}" \
        -p "${DB_PORT:-5432}" \
        -U "${DB_USER:-festival_user}" \
        -d "${DB_NAME:-festival_bot}" \
        < "$BACKUP_DIR/database.sql"
fi

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -d "$BACKUP_DIR/config" ]; then
    echo "‚öôÔ∏è Restoring configuration..."
    cp -r "$BACKUP_DIR/config/"* /app/config/ 2>/dev/null || true
fi

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if [ -d "$BACKUP_DIR/images" ]; then
    echo "üñºÔ∏è Restoring images..."
    cp -r "$BACKUP_DIR/images/"* /app/images/ 2>/dev/null || true
fi

# –û—á–∏—Å—Ç–∫–∞
rm -rf "$TEMP_DIR"

echo "‚úÖ Restore completed successfully!"
EOF

# scripts/health_check.sh - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
cat > scripts/health_check.sh << 'EOF'
#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    local service_name=$1
    local check_command=$2

    echo -n "üîç Checking $service_name... "
    if eval "$check_command" &>/dev/null; then
        echo "‚úÖ OK"
        return 0
    else
        echo "‚ùå FAILED"
        return 1
    fi
}

echo "üè• Festival Bot Health Check"
echo "=========================="

failed_checks=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
if ! check_service "PostgreSQL" "nc -z ${DB_HOST:-postgres} ${DB_PORT:-5432}"; then
    ((failed_checks++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
if [ -n "${REDIS_HOST}" ]; then
    if ! check_service "Redis" "nc -z ${REDIS_HOST} ${REDIS_PORT:-6379}"; then
        ((failed_checks++))
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
if ! check_service "Database Connection" "python /app/health_check.py"; then
    ((failed_checks++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
if ! check_service "Logs Directory" "[ -w /app/logs ]"; then
    ((failed_checks++))
fi

if ! check_service "Backups Directory" "[ -w /app/backups ]"; then
    ((failed_checks++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if ! check_service "Bot Configuration" "cd /app/src && python -c 'from config import config; config.validate_config()'"; then
    ((failed_checks++))
fi

echo "=========================="
if [ $failed_checks -eq 0 ]; then
    echo "üéâ All checks passed! Bot is healthy."
    exit 0
else
    echo "‚ö†Ô∏è $failed_checks check(s) failed!"
    exit 1
fi
EOF

# scripts/logs.sh - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
cat > scripts/logs.sh << 'EOF'
#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
show_menu() {
    echo "üìã Festival Bot Logs"
    echo "==================="
    echo "1) Bot logs (main)"
    echo "2) Error logs"
    echo "3) Support logs"
    echo "4) Stats logs"
    echo "5) All logs (live)"
    echo "6) Clear all logs"
    echo "q) Quit"
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
clear_logs() {
    read -p "‚ö†Ô∏è Are you sure you want to clear all logs? [y/N]: " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        rm -f /app/logs/*.log
        echo "‚úÖ All logs cleared!"
    else
        echo "‚ùå Operation cancelled."
    fi
}

while true; do
    show_menu
    read -p "Choose option: " choice

    case $choice in
        1)
            echo "üìÑ Bot logs:"
            tail -f /app/logs/bot.log 2>/dev/null || echo "No bot logs found"
            ;;
        2)
            echo "‚ùå Error logs:"
            tail -f /app/logs/errors.log 2>/dev/null || echo "No error logs found"
            ;;
        3)
            echo "üÜò Support logs:"
            tail -f /app/logs/support.log 2>/dev/null || echo "No support logs found"
            ;;
        4)
            echo "üìä Stats logs:"
            tail -f /app/logs/stats.log 2>/dev/null || echo "No stats logs found"
            ;;
        5)
            echo "üìã All logs (live):"
            tail -f /app/logs/*.log 2>/dev/null || echo "No logs found"
            ;;
        6)
            clear_logs
            ;;
        q|Q)
            echo "üëã Goodbye!"
            exit 0
            ;;
        *)
            echo "‚ùå Invalid option"
            ;;
    esac

    echo
    read -p "Press Enter to continue..."
    clear
done
EOF

# –î–µ–ª–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod +x scripts/*.sh

echo "‚úÖ Docker scripts created successfully!"
echo "üìÅ Created files:"
echo "  - scripts/entrypoint.sh"
echo "  - scripts/backup.sh"
echo "  - scripts/restore.sh"
echo "  - scripts/health_check.sh"
echo "  - scripts/logs.sh"